;**********************************************************************************************************************
;*
;*  Trade secret of Advanced Micro Devices, Inc.
;*  Copyright (c) 2017, Advanced Micro Devices, Inc., (unpublished)
;*
;*  All rights reserved. This notice is intended as a precaution against inadvertent publication and does not imply
;*  publication or any waiver of confidentiality. The year included in the foregoing notice is the year of creation of
;*  the work.
;*
;**********************************************************************************************************************

;**********************************************************************************************************************
;* @file  {filename}
;* @brief LLPC LLVM-IR file: contains emulation codes for GLSL matrix operations ({type}).
;*
;* @note  This file has been generated automatically. Do not hand-modify this file. When changes are needed, modify the
;*        generating template genGlslMatrixOpEmuCode.tmpl.
;**********************************************************************************************************************

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v16:16:16-v24:32:32-v32:32:32-v48:64:64-v64:64:64-v96:128:128-v128:128:128-v192:256:256-v256:256:256-v512:512:512-v1024:1024:1024"
target triple = "spir64-unknown-unknown"

; GLSL: mat2 = outerProduct(vec2, vec2)
define spir_func [2 x <2 x {type}>] @_Z12OuterProductDv2_{abbr}Dv2_{abbr}(
    <2 x {type}> %c, <2 x {type}> %r) #0
{
    %m = alloca [2 x <2 x {type}>]
    %m0 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m0, i32 0, i32 1

    %m1 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m1, i32 0, i32 1

    %c0 = extractelement <2 x {type}> %c, i32 0
    %c1 = extractelement <2 x {type}> %c, i32 1

    %r0 = extractelement <2 x {type}> %r, i32 0
    %r1 = extractelement <2 x {type}> %r, i32 1

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c0, %r1
    store {type} %3, {type}* %m10
    %4 = fmul {type} %c1, %r1
    store {type} %4, {type}* %m11
    %5 = load [2 x <2 x {type}>], [2 x <2 x {type}>]* %m

    ret [2 x <2 x {type}>] %5
}

; GLSL: mat3 = outerProduct(vec3, vec3)
define spir_func [3 x <3 x {type}>] @_Z12OuterProductDv3_{abbr}Dv3_{abbr}(
    <3 x {type}> %c, <3 x {type}> %r) #0
{
    %m = alloca [3 x <3 x {type}>]
    %m0 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 1
    %m02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 2

    %m1 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 1
    %m12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 2

    %m2 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %m, i32 0, i32 2
    %m20 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m2, i32 0, i32 0
    %m21 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m2, i32 0, i32 1
    %m22 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m2, i32 0, i32 2

    %c0 = extractelement <3 x {type}> %c, i32 0
    %c1 = extractelement <3 x {type}> %c, i32 1
    %c2 = extractelement <3 x {type}> %c, i32 2

    %r0 = extractelement <3 x {type}> %r, i32 0
    %r1 = extractelement <3 x {type}> %r, i32 1
    %r2 = extractelement <3 x {type}> %r, i32 2

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c2, %r0
    store {type} %3, {type}* %m02
    %4 = fmul {type} %c0, %r1
    store {type} %4, {type}* %m10
    %5 = fmul {type} %c1, %r1
    store {type} %5, {type}* %m11
    %6 = fmul {type} %c2, %r1
    store {type} %6, {type}* %m12
    %7 = fmul {type} %c0, %r2
    store {type} %7, {type}* %m20
    %8 = fmul {type} %c1, %r2
    store {type} %8, {type}* %m21
    %9 = fmul {type} %c2, %r2
    store {type} %9, {type}* %m22
    %10 = load [3 x <3 x {type}>], [3 x <3 x {type}>]* %m

    ret [3 x <3 x {type}>] %10
}

; GLSL: mat4 = outerProduct(vec4, vec4)
define spir_func [4 x <4 x {type}>] @_Z12OuterProductDv4_{abbr}Dv4_{abbr}(
    <4 x {type}> %c, <4 x {type}> %r) #0
{
    %m = alloca [4 x <4 x {type}>]
    %m0 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 1
    %m02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 2
    %m03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 3

    %m1 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 1
    %m12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 2
    %m13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 3

    %m2 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %m, i32 0, i32 2
    %m20 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 0
    %m21 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 1
    %m22 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 2
    %m23 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 3

    %m3 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %m, i32 0, i32 3
    %m30 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m3, i32 0, i32 0
    %m31 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m3, i32 0, i32 1
    %m32 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m3, i32 0, i32 2
    %m33 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m3, i32 0, i32 3

    %c0 = extractelement <4 x {type}> %c, i32 0
    %c1 = extractelement <4 x {type}> %c, i32 1
    %c2 = extractelement <4 x {type}> %c, i32 2
    %c3 = extractelement <4 x {type}> %c, i32 3

    %r0 = extractelement <4 x {type}> %r, i32 0
    %r1 = extractelement <4 x {type}> %r, i32 1
    %r2 = extractelement <4 x {type}> %r, i32 2
    %r3 = extractelement <4 x {type}> %r, i32 3

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c2, %r0
    store {type} %3, {type}* %m02
    %4 = fmul {type} %c3, %r0
    store {type} %4, {type}* %m03
    %5 = fmul {type} %c0, %r1
    store {type} %5, {type}* %m10
    %6 = fmul {type} %c1, %r1
    store {type} %6, {type}* %m11
    %7 = fmul {type} %c2, %r1
    store {type} %7, {type}* %m12
    %8 = fmul {type} %c3, %r1
    store {type} %8, {type}* %m13
    %9 = fmul {type} %c0, %r2
    store {type} %9, {type}* %m20
    %10 = fmul {type} %c1, %r2
    store {type} %10, {type}* %m21
    %11 = fmul {type} %c2, %r2
    store {type} %11, {type}* %m22
    %12 = fmul {type} %c3, %r2
    store {type} %12, {type}* %m23
    %13 = fmul {type} %c0, %r3
    store {type} %13, {type}* %m30
    %14 = fmul {type} %c1, %r3
    store {type} %14, {type}* %m31
    %15 = fmul {type} %c2, %r3
    store {type} %15, {type}* %m32
    %16 = fmul {type} %c3, %r3
    store {type} %16, {type}* %m33
    %17 = load [4 x <4 x {type}>], [4 x <4 x {type}>]* %m

    ret [4 x <4 x {type}>] %17
}

; GLSL: mat2x3 = outerProduct(vec3, vec2)
define spir_func [2 x <3 x {type}>] @_Z12OuterProductDv3_{abbr}Dv2_{abbr}(
    <3 x {type}> %c, <2 x {type}> %r) #0
{
    %m = alloca [2 x <3 x {type}>]
    %m0 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 1
    %m02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 2

    %m1 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 1
    %m12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 2

    %c0 = extractelement <3 x {type}> %c, i32 0
    %c1 = extractelement <3 x {type}> %c, i32 1
    %c2 = extractelement <3 x {type}> %c, i32 2

    %r0 = extractelement <2 x {type}> %r, i32 0
    %r1 = extractelement <2 x {type}> %r, i32 1

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c2, %r0
    store {type} %3, {type}* %m02
    %4 = fmul {type} %c0, %r1
    store {type} %4, {type}* %m10
    %5 = fmul {type} %c1, %r1
    store {type} %5, {type}* %m11
    %6 = fmul {type} %c2, %r1
    store {type} %6, {type}* %m12
    %7 = load [2 x <3 x {type}>], [2 x <3 x {type}>]* %m

    ret [2 x <3 x {type}>] %7
}

; GLSL: mat3x2 = outerProduct(vec2, vec3)
define spir_func [3 x <2 x {type}>] @_Z12OuterProductDv2_{abbr}Dv3_{abbr}(
    <2 x {type}> %c, <3 x {type}> %r) #0
{
    %m = alloca [3 x <2 x {type}>]
    %m0 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m0, i32 0, i32 1

    %m1 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m1, i32 0, i32 1

    %m2 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %m, i32 0, i32 2
    %m20 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m2, i32 0, i32 0
    %m21 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m2, i32 0, i32 1

    %c0 = extractelement <2 x {type}> %c, i32 0
    %c1 = extractelement <2 x {type}> %c, i32 1

    %r0 = extractelement <3 x {type}> %r, i32 0
    %r1 = extractelement <3 x {type}> %r, i32 1
    %r2 = extractelement <3 x {type}> %r, i32 2

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c0, %r1
    store {type} %3, {type}* %m10
    %4 = fmul {type} %c1, %r1
    store {type} %4, {type}* %m11
    %5 = fmul {type} %c0, %r2
    store {type} %5, {type}* %m20
    %6 = fmul {type} %c1, %r2
    store {type} %6, {type}* %m21
    %7 = load [3 x <2 x {type}>], [3 x <2 x {type}>]* %m

    ret [3 x <2 x {type}>] %7
}

; GLSL: mat2x4 = outerProduct(vec4, vec2)
define spir_func [2 x <4 x {type}>] @_Z12OuterProductDv4_{abbr}Dv2_{abbr}(
    <4 x {type}> %c, <2 x {type}> %r) #0
{
    %m = alloca [2 x <4 x {type}>]
    %m0 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 1
    %m02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 2
    %m03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 3

    %m1 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 1
    %m12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 2
    %m13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 3

    %c0 = extractelement <4 x {type}> %c, i32 0
    %c1 = extractelement <4 x {type}> %c, i32 1
    %c2 = extractelement <4 x {type}> %c, i32 2
    %c3 = extractelement <4 x {type}> %c, i32 3

    %r0 = extractelement <2 x {type}> %r, i32 0
    %r1 = extractelement <2 x {type}> %r, i32 1

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c2, %r0
    store {type} %3, {type}* %m02
    %4 = fmul {type} %c3, %r0
    store {type} %4, {type}* %m03
    %5 = fmul {type} %c0, %r1
    store {type} %5, {type}* %m10
    %6 = fmul {type} %c1, %r1
    store {type} %6, {type}* %m11
    %7 = fmul {type} %c2, %r1
    store {type} %7, {type}* %m12
    %8 = fmul {type} %c3, %r1
    store {type} %8, {type}* %m13
    %9 = load [2 x <4 x {type}>], [2 x <4 x {type}>]* %m

    ret [2 x <4 x {type}>] %9
}

; GLSL: mat4x2 = outerProduct(vec2, vec4)
define spir_func [4 x <2 x {type}>] @_Z12OuterProductDv2_{abbr}Dv4_{abbr}(
    <2 x {type}> %c, <4 x {type}> %r) #0
{
    %m = alloca [4 x <2 x {type}>]
    %m0 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m0, i32 0, i32 1

    %m1 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m1, i32 0, i32 1

    %m2 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %m, i32 0, i32 2
    %m20 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m2, i32 0, i32 0
    %m21 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m2, i32 0, i32 1

    %m3 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %m, i32 0, i32 3
    %m30 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m3, i32 0, i32 0
    %m31 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %m3, i32 0, i32 1

    %c0 = extractelement <2 x {type}> %c, i32 0
    %c1 = extractelement <2 x {type}> %c, i32 1

    %r0 = extractelement <4 x {type}> %r, i32 0
    %r1 = extractelement <4 x {type}> %r, i32 1
    %r2 = extractelement <4 x {type}> %r, i32 2
    %r3 = extractelement <4 x {type}> %r, i32 3

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c0, %r1
    store {type} %3, {type}* %m10
    %4 = fmul {type} %c1, %r1
    store {type} %4, {type}* %m11
    %5 = fmul {type} %c0, %r2
    store {type} %5, {type}* %m20
    %6 = fmul {type} %c1, %r2
    store {type} %6, {type}* %m21
    %7 = fmul {type} %c0, %r3
    store {type} %7, {type}* %m30
    %8 = fmul {type} %c1, %r3
    store {type} %8, {type}* %m31
    %9 = load [4 x <2 x {type}>], [4 x <2 x {type}>]* %m

    ret [4 x <2 x {type}>] %9
}

; GLSL: mat3x4 = outerProduct(vec4, vec3)
define spir_func [3 x <4 x {type}>] @_Z12OuterProductDv4_{abbr}Dv3_{abbr}(
    <4 x {type}> %c, <3 x {type}> %r) #0
{
    %m = alloca [3 x <4 x {type}>]
    %m0 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 1
    %m02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 2
    %m03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m0, i32 0, i32 3

    %m1 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 1
    %m12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 2
    %m13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m1, i32 0, i32 3

    %m2 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %m, i32 0, i32 2
    %m20 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 0
    %m21 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 1
    %m22 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 2
    %m23 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %m2, i32 0, i32 3

    %c0 = extractelement <4 x {type}> %c, i32 0
    %c1 = extractelement <4 x {type}> %c, i32 1
    %c2 = extractelement <4 x {type}> %c, i32 2
    %c3 = extractelement <4 x {type}> %c, i32 3

    %r0 = extractelement <3 x {type}> %r, i32 0
    %r1 = extractelement <3 x {type}> %r, i32 1
    %r2 = extractelement <3 x {type}> %r, i32 2

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c2, %r0
    store {type} %3, {type}* %m02
    %4 = fmul {type} %c3, %r0
    store {type} %4, {type}* %m03
    %5 = fmul {type} %c0, %r1
    store {type} %5, {type}* %m10
    %6 = fmul {type} %c1, %r1
    store {type} %6, {type}* %m11
    %7 = fmul {type} %c2, %r1
    store {type} %7, {type}* %m12
    %8 = fmul {type} %c3, %r1
    store {type} %8, {type}* %m13
    %9 = fmul {type} %c0, %r2
    store {type} %9, {type}* %m20
    %10 = fmul {type} %c1, %r2
    store {type} %10, {type}* %m21
    %11 = fmul {type} %c2, %r2
    store {type} %11, {type}* %m22
    %12 = fmul {type} %c3, %r2
    store {type} %12, {type}* %m23
    %13 = load [3 x <4 x {type}>], [3 x <4 x {type}>]* %m

    ret [3 x <4 x {type}>] %13
}

; GLSL: mat4x3 = outerProduct(vec3, vec4)
define spir_func [4 x <3 x {type}>] @_Z12OuterProductDv3_{abbr}Dv4_{abbr}(
    <3 x {type}> %c, <4 x {type}> %r) #0
{
    %m = alloca [4 x <3 x {type}>]
    %m0 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %m, i32 0, i32 0
    %m00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 0
    %m01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 1
    %m02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m0, i32 0, i32 2

    %m1 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %m, i32 0, i32 1
    %m10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 0
    %m11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 1
    %m12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m1, i32 0, i32 2

    %m2 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %m, i32 0, i32 2
    %m20 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m2, i32 0, i32 0
    %m21 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m2, i32 0, i32 1
    %m22 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m2, i32 0, i32 2

    %m3 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %m, i32 0, i32 3
    %m30 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m3, i32 0, i32 0
    %m31 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m3, i32 0, i32 1
    %m32 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %m3, i32 0, i32 2

    %c0 = extractelement <3 x {type}> %c, i32 0
    %c1 = extractelement <3 x {type}> %c, i32 1
    %c2 = extractelement <3 x {type}> %c, i32 2

    %r0 = extractelement <4 x {type}> %r, i32 0
    %r1 = extractelement <4 x {type}> %r, i32 1
    %r2 = extractelement <4 x {type}> %r, i32 2
    %r3 = extractelement <4 x {type}> %r, i32 3

    %1 = fmul {type} %c0, %r0
    store {type} %1, {type}* %m00
    %2 = fmul {type} %c1, %r0
    store {type} %2, {type}* %m01
    %3 = fmul {type} %c2, %r0
    store {type} %3, {type}* %m02
    %4 = fmul {type} %c0, %r1
    store {type} %4, {type}* %m10
    %5 = fmul {type} %c1, %r1
    store {type} %5, {type}* %m11
    %6 = fmul {type} %c2, %r1
    store {type} %6, {type}* %m12
    %7 = fmul {type} %c0, %r2
    store {type} %7, {type}* %m20
    %8 = fmul {type} %c1, %r2
    store {type} %8, {type}* %m21
    %9 = fmul {type} %c2, %r2
    store {type} %9, {type}* %m22
    %10 = fmul {type} %c0, %r3
    store {type} %10, {type}* %m30
    %11 = fmul {type} %c1, %r3
    store {type} %11, {type}* %m31
    %12 = fmul {type} %c2, %r3
    store {type} %12, {type}* %m32
    %13 = load [4 x <3 x {type}>], [4 x <3 x {type}>]* %m

    ret [4 x <3 x {type}>] %13
}

; GLSL: mat2 = transpose(mat2)
define spir_func [2 x <2 x {type}>] @_Z9TransposeDv2_Dv2_{abbr}(
    [2 x <2 x {type}>] %m) #0
{
    %nm = alloca [2 x <2 x {type}>]
    %nm0 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 1

    %nm1 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 1

    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [2 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    %nmv = load [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm
    ret [2 x <2 x {type}>] %nmv
}

; GLSL: mat3 = transpose(mat3)
define spir_func [3 x <3 x {type}>] @_Z9TransposeDv3_Dv3_{abbr}(
    [3 x <3 x {type}>] %m) #0
{
    %nm = alloca [3 x <3 x {type}>]
    %nm0 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 2

    %nm1 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 2

    %nm2 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 2

    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    %m2v = extractvalue [3 x <3 x {type}>] %m, 2
    %m2v0 = extractelement <3 x {type}> %m2v, i32 0
    %m2v1 = extractelement <3 x {type}> %m2v, i32 1
    %m2v2 = extractelement <3 x {type}> %m2v, i32 2

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m2v0, {type}* %nm02
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m2v1, {type}* %nm12
    store {type} %m0v2, {type}* %nm20
    store {type} %m1v2, {type}* %nm21
    store {type} %m2v2, {type}* %nm22
    %nmv = load [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm
    ret [3 x <3 x {type}>] %nmv
}

; GLSL: mat4 = transpose(mat4)
define spir_func [4 x <4 x {type}>] @_Z9TransposeDv4_Dv4_{abbr}(
    [4 x <4 x {type}>] %m) #0
{
    %nm = alloca [4 x <4 x {type}>]
    %nm0 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 2
    %nm03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 3

    %nm1 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 2
    %nm13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 3

    %nm2 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 2
    %nm23 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 3

    %nm3 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 3
    %nm30 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 0
    %nm31 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 1
    %nm32 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 2
    %nm33 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 3

    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m2v0 = extractelement <4 x {type}> %m2v, i32 0
    %m2v1 = extractelement <4 x {type}> %m2v, i32 1
    %m2v2 = extractelement <4 x {type}> %m2v, i32 2
    %m2v3 = extractelement <4 x {type}> %m2v, i32 3

    %m3v = extractvalue [4 x <4 x {type}>] %m, 3
    %m3v0 = extractelement <4 x {type}> %m3v, i32 0
    %m3v1 = extractelement <4 x {type}> %m3v, i32 1
    %m3v2 = extractelement <4 x {type}> %m3v, i32 2
    %m3v3 = extractelement <4 x {type}> %m3v, i32 3

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m2v0, {type}* %nm02
    store {type} %m3v0, {type}* %nm03
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m2v1, {type}* %nm12
    store {type} %m3v1, {type}* %nm13
    store {type} %m0v2, {type}* %nm20
    store {type} %m1v2, {type}* %nm21
    store {type} %m2v2, {type}* %nm22
    store {type} %m3v2, {type}* %nm23
    store {type} %m0v3, {type}* %nm30
    store {type} %m1v3, {type}* %nm31
    store {type} %m2v3, {type}* %nm32
    store {type} %m3v3, {type}* %nm33
    %nmv = load [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm
    ret [4 x <4 x {type}>] %nmv
}

; GLSL: mat2x3 = transpose(mat3x2)
define spir_func [2 x <3 x {type}>] @_Z9TransposeDv3_Dv2_{abbr}(
    [3 x <2 x {type}>] %m) #0
{
    %nm = alloca [2 x <3 x {type}>]
    %nm0 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 2

    %nm1 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 2

    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    %m2v = extractvalue [3 x <2 x {type}>] %m, 2
    %m2v0 = extractelement <2 x {type}> %m2v, i32 0
    %m2v1 = extractelement <2 x {type}> %m2v, i32 1

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m2v0, {type}* %nm02
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m2v1, {type}* %nm12
    %nmv = load [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm
    ret [2 x <3 x {type}>] %nmv
}

; GLSL: mat3x2 = transpose(mat2x3)
define spir_func [3 x <2 x {type}>] @_Z9TransposeDv2_Dv3_{abbr}(
    [2 x <3 x {type}>] %m) #0
{
    %nm = alloca [3 x <2 x {type}>]
    %nm0 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 1

    %nm1 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 1

    %nm2 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 1

    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [2 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m0v2, {type}* %nm20
    store {type} %m1v2, {type}* %nm21
    %nmv = load [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm
    ret [3 x <2 x {type}>] %nmv
}

; GLSL: mat2x4 = transpose(mat4x2)
define spir_func [2 x <4 x {type}>] @_Z9TransposeDv4_Dv2_{abbr}(
    [4 x <2 x {type}>] %m) #0
{
    %nm = alloca [2 x <4 x {type}>]
    %nm0 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 2
    %nm03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 3

    %nm1 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 2
    %nm13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 3

    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %m2v0 = extractelement <2 x {type}> %m2v, i32 0
    %m2v1 = extractelement <2 x {type}> %m2v, i32 1

    %m3v = extractvalue [4 x <2 x {type}>] %m, 3
    %m3v0 = extractelement <2 x {type}> %m3v, i32 0
    %m3v1 = extractelement <2 x {type}> %m3v, i32 1

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m2v0, {type}* %nm02
    store {type} %m3v0, {type}* %nm03
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m2v1, {type}* %nm12
    store {type} %m3v1, {type}* %nm13
    %nmv = load [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm
    ret [2 x <4 x {type}>] %nmv
}

; GLSL: mat4x2 = transpose(mat2x4)
define spir_func [4 x <2 x {type}>] @_Z9TransposeDv2_Dv4_{abbr}(
    [2 x <4 x {type}>] %m) #0
{
    %nm = alloca [4 x <2 x {type}>]
    %nm0 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 1

    %nm1 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 1

    %nm2 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 1

    %nm3 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 3
    %nm30 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm3, i32 0, i32 0
    %nm31 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm3, i32 0, i32 1

    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [2 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m0v2, {type}* %nm20
    store {type} %m1v2, {type}* %nm21
    store {type} %m0v3, {type}* %nm30
    store {type} %m1v3, {type}* %nm31
    %nmv = load [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm
    ret [4 x <2 x {type}>] %nmv
}

; GLSL: mat3x4 = transpose(mat4x3)
define spir_func [3 x <4 x {type}>] @_Z9TransposeDv4_Dv3_{abbr}(
    [4 x <3 x {type}>] %m) #0
{
    %nm = alloca [3 x <4 x {type}>]
    %nm0 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 2
    %nm03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 3

    %nm1 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 2
    %nm13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 3

    %nm2 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 2
    %nm23 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 3

    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %m2v0 = extractelement <3 x {type}> %m2v, i32 0
    %m2v1 = extractelement <3 x {type}> %m2v, i32 1
    %m2v2 = extractelement <3 x {type}> %m2v, i32 2

    %m3v = extractvalue [4 x <3 x {type}>] %m, 3
    %m3v0 = extractelement <3 x {type}> %m3v, i32 0
    %m3v1 = extractelement <3 x {type}> %m3v, i32 1
    %m3v2 = extractelement <3 x {type}> %m3v, i32 2

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m2v0, {type}* %nm02
    store {type} %m3v0, {type}* %nm03
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m2v1, {type}* %nm12
    store {type} %m3v1, {type}* %nm13
    store {type} %m0v2, {type}* %nm20
    store {type} %m1v2, {type}* %nm21
    store {type} %m2v2, {type}* %nm22
    store {type} %m3v2, {type}* %nm23
    %nmv = load [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm
    ret [3 x <4 x {type}>] %nmv
}

; GLSL: mat4x3 = transpose(mat3x4)
define spir_func [4 x <3 x {type}>] @_Z9TransposeDv3_Dv4_{abbr}(
    [3 x <4 x {type}>] %m) #0
{
    %nm = alloca [4 x <3 x {type}>]
    %nm0 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 2

    %nm1 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 2

    %nm2 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 2

    %nm3 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 3
    %nm30 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm3, i32 0, i32 0
    %nm31 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm3, i32 0, i32 1
    %nm32 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm3, i32 0, i32 2

    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    %m2v = extractvalue [3 x <4 x {type}>] %m, 2
    %m2v0 = extractelement <4 x {type}> %m2v, i32 0
    %m2v1 = extractelement <4 x {type}> %m2v, i32 1
    %m2v2 = extractelement <4 x {type}> %m2v, i32 2
    %m2v3 = extractelement <4 x {type}> %m2v, i32 3

    store {type} %m0v0, {type}* %nm00
    store {type} %m1v0, {type}* %nm01
    store {type} %m2v0, {type}* %nm02
    store {type} %m0v1, {type}* %nm10
    store {type} %m1v1, {type}* %nm11
    store {type} %m2v1, {type}* %nm12
    store {type} %m0v2, {type}* %nm20
    store {type} %m1v2, {type}* %nm21
    store {type} %m2v2, {type}* %nm22
    store {type} %m0v3, {type}* %nm30
    store {type} %m1v3, {type}* %nm31
    store {type} %m2v3, {type}* %nm32
    %nmv = load [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm
    ret [4 x <3 x {type}>] %nmv
}

; GLSL: mat2 = mat2 * float
define spir_func [2 x <2 x {type}>] @_Z17MatrixTimesScalarDv2_Dv2_{abbr}{abbr}(
    [2 x <2 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [2 x <2 x {type}>]
    %nm0 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 1

    %nm1 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 1

    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [2 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m1v0, %s
    store {type} %3, {type}* %nm10
    %4 = fmul {type} %m1v1, %s
    store {type} %4, {type}* %nm11
    %5 = load [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm

    ret [2 x <2 x {type}>] %5
}

; GLSL: mat3 = mat3 * float
define spir_func [3 x <3 x {type}>] @_Z17MatrixTimesScalarDv3_Dv3_{abbr}{abbr}(
    [3 x <3 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [3 x <3 x {type}>]
    %nm0 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 2

    %nm1 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 2

    %nm2 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 2

    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    %m2v = extractvalue [3 x <3 x {type}>] %m, 2
    %m2v0 = extractelement <3 x {type}> %m2v, i32 0
    %m2v1 = extractelement <3 x {type}> %m2v, i32 1
    %m2v2 = extractelement <3 x {type}> %m2v, i32 2

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m0v2, %s
    store {type} %3, {type}* %nm02
    %4 = fmul {type} %m1v0, %s
    store {type} %4, {type}* %nm10
    %5 = fmul {type} %m1v1, %s
    store {type} %5, {type}* %nm11
    %6 = fmul {type} %m1v2, %s
    store {type} %6, {type}* %nm12
    %7 = fmul {type} %m2v0, %s
    store {type} %7, {type}* %nm20
    %8 = fmul {type} %m2v1, %s
    store {type} %8, {type}* %nm21
    %9 = fmul {type} %m2v2, %s
    store {type} %9, {type}* %nm22
    %10 = load [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm

    ret [3 x <3 x {type}>] %10
}

; GLSL: mat4 = mat4 * float
define spir_func [4 x <4 x {type}>] @_Z17MatrixTimesScalarDv4_Dv4_{abbr}{abbr}(
    [4 x <4 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [4 x <4 x {type}>]
    %nm0 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 2
    %nm03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 3

    %nm1 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 2
    %nm13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 3

    %nm2 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 2
    %nm23 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 3

    %nm3 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 3
    %nm30 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 0
    %nm31 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 1
    %nm32 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 2
    %nm33 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm3, i32 0, i32 3

    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m2v0 = extractelement <4 x {type}> %m2v, i32 0
    %m2v1 = extractelement <4 x {type}> %m2v, i32 1
    %m2v2 = extractelement <4 x {type}> %m2v, i32 2
    %m2v3 = extractelement <4 x {type}> %m2v, i32 3

    %m3v = extractvalue [4 x <4 x {type}>] %m, 3
    %m3v0 = extractelement <4 x {type}> %m3v, i32 0
    %m3v1 = extractelement <4 x {type}> %m3v, i32 1
    %m3v2 = extractelement <4 x {type}> %m3v, i32 2
    %m3v3 = extractelement <4 x {type}> %m3v, i32 3

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m0v2, %s
    store {type} %3, {type}* %nm02
    %4 = fmul {type} %m0v3, %s
    store {type} %4, {type}* %nm03
    %5 = fmul {type} %m1v0, %s
    store {type} %5, {type}* %nm10
    %6 = fmul {type} %m1v1, %s
    store {type} %6, {type}* %nm11
    %7 = fmul {type} %m1v2, %s
    store {type} %7, {type}* %nm12
    %8 = fmul {type} %m1v3, %s
    store {type} %8, {type}* %nm13
    %9 = fmul {type} %m2v0, %s
    store {type} %9, {type}* %nm20
    %10 = fmul {type} %m2v1, %s
    store {type} %10, {type}* %nm21
    %11 = fmul {type} %m2v2, %s
    store {type} %11, {type}* %nm22
    %12 = fmul {type} %m2v3, %s
    store {type} %12, {type}* %nm23
    %13 = fmul {type} %m3v0, %s
    store {type} %13, {type}* %nm30
    %14 = fmul {type} %m3v1, %s
    store {type} %14, {type}* %nm31
    %15 = fmul {type} %m3v2, %s
    store {type} %15, {type}* %nm32
    %16 = fmul {type} %m3v3, %s
    store {type} %16, {type}* %nm33
    %17 = load [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm

    ret [4 x <4 x {type}>] %17
}

; GLSL: mat3x2 = mat3x2 * float
define spir_func [3 x <2 x {type}>] @_Z17MatrixTimesScalarDv3_Dv2_{abbr}{abbr}(
    [3 x <2 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [3 x <2 x {type}>]
    %nm0 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 1

    %nm1 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 1

    %nm2 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 1

    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    %m2v = extractvalue [3 x <2 x {type}>] %m, 2
    %m2v0 = extractelement <2 x {type}> %m2v, i32 0
    %m2v1 = extractelement <2 x {type}> %m2v, i32 1

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m1v0, %s
    store {type} %3, {type}* %nm10
    %4 = fmul {type} %m1v1, %s
    store {type} %4, {type}* %nm11
    %5 = fmul {type} %m2v0, %s
    store {type} %5, {type}* %nm20
    %6 = fmul {type} %m2v1, %s
    store {type} %6, {type}* %nm21
    %7 = load [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm

    ret [3 x <2 x {type}>] %7
}

; GLSL: mat2x3 = mat2x3 * float
define spir_func [2 x <3 x {type}>] @_Z17MatrixTimesScalarDv2_Dv3_{abbr}{abbr}(
    [2 x <3 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [2 x <3 x {type}>]
    %nm0 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 2

    %nm1 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 2

    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [2 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m0v2, %s
    store {type} %3, {type}* %nm02
    %4 = fmul {type} %m1v0, %s
    store {type} %4, {type}* %nm10
    %5 = fmul {type} %m1v1, %s
    store {type} %5, {type}* %nm11
    %6 = fmul {type} %m1v2, %s
    store {type} %6, {type}* %nm12
    %7 = load [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm

    ret [2 x <3 x {type}>] %7
}

; GLSL: mat4x2 = mat4x2 * float
define spir_func [4 x <2 x {type}>] @_Z17MatrixTimesScalarDv4_Dv2_{abbr}{abbr}(
    [4 x <2 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [4 x <2 x {type}>]
    %nm0 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm0, i32 0, i32 1

    %nm1 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm1, i32 0, i32 1

    %nm2 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm2, i32 0, i32 1

    %nm3 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 3
    %nm30 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm3, i32 0, i32 0
    %nm31 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nm3, i32 0, i32 1

    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %m2v0 = extractelement <2 x {type}> %m2v, i32 0
    %m2v1 = extractelement <2 x {type}> %m2v, i32 1

    %m3v = extractvalue [4 x <2 x {type}>] %m, 3
    %m3v0 = extractelement <2 x {type}> %m3v, i32 0
    %m3v1 = extractelement <2 x {type}> %m3v, i32 1

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m1v0, %s
    store {type} %3, {type}* %nm10
    %4 = fmul {type} %m1v1, %s
    store {type} %4, {type}* %nm11
    %5 = fmul {type} %m2v0, %s
    store {type} %5, {type}* %nm20
    %6 = fmul {type} %m2v1, %s
    store {type} %6, {type}* %nm21
    %7 = fmul {type} %m3v0, %s
    store {type} %7, {type}* %nm30
    %8 = fmul {type} %m3v1, %s
    store {type} %8, {type}* %nm31
    %9 = load [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm

    ret [4 x <2 x {type}>] %9
}

; GLSL: mat2x4 = mat2x4 * float
define spir_func [2 x <4 x {type}>] @_Z17MatrixTimesScalarDv2_Dv4_{abbr}{abbr}(
    [2 x <4 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [2 x <4 x {type}>]
    %nm0 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 2
    %nm03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 3

    %nm1 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 2
    %nm13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 3

    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [2 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m0v2, %s
    store {type} %3, {type}* %nm02
    %4 = fmul {type} %m0v3, %s
    store {type} %4, {type}* %nm03
    %5 = fmul {type} %m1v0, %s
    store {type} %5, {type}* %nm10
    %6 = fmul {type} %m1v1, %s
    store {type} %6, {type}* %nm11
    %7 = fmul {type} %m1v2, %s
    store {type} %7, {type}* %nm12
    %8 = fmul {type} %m1v3, %s
    store {type} %8, {type}* %nm13
    %9 = load [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm

    ret [2 x <4 x {type}>] %9
}

; GLSL: mat4x3 = mat4x3 * float
define spir_func [4 x <3 x {type}>] @_Z17MatrixTimesScalarDv4_Dv3_{abbr}{abbr}(
    [4 x <3 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [4 x <3 x {type}>]
    %nm0 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm0, i32 0, i32 2

    %nm1 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm1, i32 0, i32 2

    %nm2 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm2, i32 0, i32 2

    %nm3 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 3
    %nm30 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm3, i32 0, i32 0
    %nm31 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm3, i32 0, i32 1
    %nm32 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nm3, i32 0, i32 2

    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %m2v0 = extractelement <3 x {type}> %m2v, i32 0
    %m2v1 = extractelement <3 x {type}> %m2v, i32 1
    %m2v2 = extractelement <3 x {type}> %m2v, i32 2

    %m3v = extractvalue [4 x <3 x {type}>] %m, 3
    %m3v0 = extractelement <3 x {type}> %m3v, i32 0
    %m3v1 = extractelement <3 x {type}> %m3v, i32 1
    %m3v2 = extractelement <3 x {type}> %m3v, i32 2

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m0v2, %s
    store {type} %3, {type}* %nm02
    %4 = fmul {type} %m1v0, %s
    store {type} %4, {type}* %nm10
    %5 = fmul {type} %m1v1, %s
    store {type} %5, {type}* %nm11
    %6 = fmul {type} %m1v2, %s
    store {type} %6, {type}* %nm12
    %7 = fmul {type} %m2v0, %s
    store {type} %7, {type}* %nm20
    %8 = fmul {type} %m2v1, %s
    store {type} %8, {type}* %nm21
    %9 = fmul {type} %m2v2, %s
    store {type} %9, {type}* %nm22
    %10 = fmul {type} %m3v0, %s
    store {type} %10, {type}* %nm30
    %11 = fmul {type} %m3v1, %s
    store {type} %11, {type}* %nm31
    %12 = fmul {type} %m3v2, %s
    store {type} %12, {type}* %nm32
    %13 = load [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm

    ret [4 x <3 x {type}>] %13
}

; GLSL: mat3x4 = mat3x4 * float
define spir_func [3 x <4 x {type}>] @_Z17MatrixTimesScalarDv3_Dv4_{abbr}{abbr}(
    [3 x <4 x {type}>] %m, {type} %s) #0
{
    %nm = alloca [3 x <4 x {type}>]
    %nm0 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 0
    %nm00 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 0
    %nm01 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 1
    %nm02 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 2
    %nm03 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm0, i32 0, i32 3

    %nm1 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 1
    %nm10 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 0
    %nm11 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 1
    %nm12 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 2
    %nm13 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm1, i32 0, i32 3

    %nm2 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 2
    %nm20 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 0
    %nm21 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 1
    %nm22 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 2
    %nm23 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nm2, i32 0, i32 3

    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    %m2v = extractvalue [3 x <4 x {type}>] %m, 2
    %m2v0 = extractelement <4 x {type}> %m2v, i32 0
    %m2v1 = extractelement <4 x {type}> %m2v, i32 1
    %m2v2 = extractelement <4 x {type}> %m2v, i32 2
    %m2v3 = extractelement <4 x {type}> %m2v, i32 3

    %1 = fmul {type} %m0v0, %s
    store {type} %1, {type}* %nm00
    %2 = fmul {type} %m0v1, %s
    store {type} %2, {type}* %nm01
    %3 = fmul {type} %m0v2, %s
    store {type} %3, {type}* %nm02
    %4 = fmul {type} %m0v3, %s
    store {type} %4, {type}* %nm03
    %5 = fmul {type} %m1v0, %s
    store {type} %5, {type}* %nm10
    %6 = fmul {type} %m1v1, %s
    store {type} %6, {type}* %nm11
    %7 = fmul {type} %m1v2, %s
    store {type} %7, {type}* %nm12
    %8 = fmul {type} %m1v3, %s
    store {type} %8, {type}* %nm13
    %9 = fmul {type} %m2v0, %s
    store {type} %9, {type}* %nm20
    %10 = fmul {type} %m2v1, %s
    store {type} %10, {type}* %nm21
    %11 = fmul {type} %m2v2, %s
    store {type} %11, {type}* %nm22
    %12 = fmul {type} %m2v3, %s
    store {type} %12, {type}* %nm23
    %13 = load [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm

    ret [3 x <4 x {type}>] %13
}

; GLSL: vec2 = vec2 * mat2
define spir_func <2 x {type}> @_Z17VectorTimesMatrixDv2_{abbr}Dv2_Dv2_{abbr}(
    <2 x {type}> %c, [2 x <2 x {type}>] %m) #0
{
    %nv = alloca <2 x {type}>
    %nvp0 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nv, i32 0, i32 1

    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m0v, <2 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [2 x <2 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m1v, <2 x {type}> %c)
    store {type} %2, {type}* %nvp1

    %3 = load <2 x {type}>, <2 x {type}>* %nv

    ret <2 x {type}> %3
}

; GLSL: vec3 = vec3 * mat3
define spir_func <3 x {type}> @_Z17VectorTimesMatrixDv3_{abbr}Dv3_Dv3_{abbr}(
    <3 x {type}> %c, [3 x <3 x {type}>] %m) #0
{
    %nv = alloca <3 x {type}>
    %nvp0 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 1
    %nvp2 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 2

    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m0v, <3 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m1v, <3 x {type}> %c)
    store {type} %2, {type}* %nvp1
    %m2v = extractvalue [3 x <3 x {type}>] %m, 2
    %3 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m2v, <3 x {type}> %c)
    store {type} %3, {type}* %nvp2

    %4 = load <3 x {type}>, <3 x {type}>* %nv

    ret <3 x {type}> %4
}

; GLSL: vec4 = vec4 * mat4
define spir_func <4 x {type}> @_Z17VectorTimesMatrixDv4_{abbr}Dv4_Dv4_{abbr}(
    <4 x {type}> %c, [4 x <4 x {type}>] %m) #0
{
    %nv = alloca <4 x {type}>
    %nvp0 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 1
    %nvp2 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 2
    %nvp3 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 3

    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m0v, <4 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m1v, <4 x {type}> %c)
    store {type} %2, {type}* %nvp1
    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %3 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m2v, <4 x {type}> %c)
    store {type} %3, {type}* %nvp2
    %m3v = extractvalue [4 x <4 x {type}>] %m, 3
    %4 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m3v, <4 x {type}> %c)
    store {type} %4, {type}* %nvp3

    %5 = load <4 x {type}>, <4 x {type}>* %nv

    ret <4 x {type}> %5
}

; GLSL: vec3 = vec2 * mat3x2
define spir_func <3 x {type}> @_Z17VectorTimesMatrixDv2_{abbr}Dv3_Dv2_{abbr}(
    <2 x {type}> %c, [3 x <2 x {type}>] %m) #0
{
    %nv = alloca <3 x {type}>
    %nvp0 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 1
    %nvp2 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 2

    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m0v, <2 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m1v, <2 x {type}> %c)
    store {type} %2, {type}* %nvp1
    %m2v = extractvalue [3 x <2 x {type}>] %m, 2
    %3 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m2v, <2 x {type}> %c)
    store {type} %3, {type}* %nvp2

    %4 = load <3 x {type}>, <3 x {type}>* %nv

    ret <3 x {type}> %4
}

; GLSL: vec4 = vec2 * mat4x2
define spir_func <4 x {type}> @_Z17VectorTimesMatrixDv2_{abbr}Dv4_Dv2_{abbr}(
    <2 x {type}> %c, [4 x <2 x {type}>] %m) #0
{
    %nv = alloca <4 x {type}>
    %nvp0 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 1
    %nvp2 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 2
    %nvp3 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 3

    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m0v, <2 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m1v, <2 x {type}> %c)
    store {type} %2, {type}* %nvp1
    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %3 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m2v, <2 x {type}> %c)
    store {type} %3, {type}* %nvp2
    %m3v = extractvalue [4 x <2 x {type}>] %m, 3
    %4 = call {type} @_Z3dotDv2_{abbr}Dv2_{abbr}(<2 x {type}> %m3v, <2 x {type}> %c)
    store {type} %4, {type}* %nvp3

    %5 = load <4 x {type}>, <4 x {type}>* %nv

    ret <4 x {type}> %5
}

; GLSL: vec2 = vec3 * mat2x3
define spir_func <2 x {type}> @_Z17VectorTimesMatrixDv3_{abbr}Dv2_Dv3_{abbr}(
    <3 x {type}> %c, [2 x <3 x {type}>] %m) #0
{
    %nv = alloca <2 x {type}>
    %nvp0 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nv, i32 0, i32 1

    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m0v, <3 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [2 x <3 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m1v, <3 x {type}> %c)
    store {type} %2, {type}* %nvp1

    %3 = load <2 x {type}>, <2 x {type}>* %nv

    ret <2 x {type}> %3
}

; GLSL: vec4 = vec3 * mat4x3
define spir_func <4 x {type}> @_Z17VectorTimesMatrixDv3_{abbr}Dv4_Dv3_{abbr}(
    <3 x {type}> %c, [4 x <3 x {type}>] %m) #0
{
    %nv = alloca <4 x {type}>
    %nvp0 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 1
    %nvp2 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 2
    %nvp3 = getelementptr inbounds <4 x {type}>, <4 x {type}>* %nv, i32 0, i32 3

    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m0v, <3 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m1v, <3 x {type}> %c)
    store {type} %2, {type}* %nvp1
    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %3 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m2v, <3 x {type}> %c)
    store {type} %3, {type}* %nvp2
    %m3v = extractvalue [4 x <3 x {type}>] %m, 3
    %4 = call {type} @_Z3dotDv3_{abbr}Dv3_{abbr}(<3 x {type}> %m3v, <3 x {type}> %c)
    store {type} %4, {type}* %nvp3

    %5 = load <4 x {type}>, <4 x {type}>* %nv

    ret <4 x {type}> %5
}

; GLSL: vec2 = vec4 * mat2x4
define spir_func <2 x {type}> @_Z17VectorTimesMatrixDv4_{abbr}Dv2_Dv4_{abbr}(
    <4 x {type}> %c, [2 x <4 x {type}>] %m) #0
{
    %nv = alloca <2 x {type}>
    %nvp0 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <2 x {type}>, <2 x {type}>* %nv, i32 0, i32 1

    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m0v, <4 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [2 x <4 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m1v, <4 x {type}> %c)
    store {type} %2, {type}* %nvp1

    %3 = load <2 x {type}>, <2 x {type}>* %nv

    ret <2 x {type}> %3
}

; GLSL: vec3 = vec4 * mat3x4
define spir_func <3 x {type}> @_Z17VectorTimesMatrixDv4_{abbr}Dv3_Dv4_{abbr}(
    <4 x {type}> %c, [3 x <4 x {type}>] %m) #0
{
    %nv = alloca <3 x {type}>
    %nvp0 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 0
    %nvp1 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 1
    %nvp2 = getelementptr inbounds <3 x {type}>, <3 x {type}>* %nv, i32 0, i32 2

    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %1 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m0v, <4 x {type}> %c)
    store {type} %1, {type}* %nvp0
    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %2 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m1v, <4 x {type}> %c)
    store {type} %2, {type}* %nvp1
    %m2v = extractvalue [3 x <4 x {type}>] %m, 2
    %3 = call {type} @_Z3dotDv4_{abbr}Dv4_{abbr}(<4 x {type}> %m2v, <4 x {type}> %c)
    store {type} %3, {type}* %nvp2

    %4 = load <3 x {type}>, <3 x {type}>* %nv

    ret <3 x {type}> %4
}

; GLSL: vec2 = mat2 * vec2
define spir_func <2 x {type}> @_Z17MatrixTimesVectorDv2_Dv2_{abbr}Dv2_{abbr}(
    [2 x <2 x {type}>] %m, <2 x {type}> %r) #0
{
    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m1v = extractvalue [2 x <2 x {type}>] %m, 1

    %r0 = shufflevector <2 x {type}> %r, <2 x {type}> %r, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %r0
    %r1 = shufflevector <2 x {type}> %r, <2 x {type}> %r, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %r1
    %3 = fadd <2 x {type}> %2, %1

    ret <2 x {type}> %3
}

; GLSL: vec3 = mat3 * vec3
define spir_func <3 x {type}> @_Z17MatrixTimesVectorDv3_Dv3_{abbr}Dv3_{abbr}(
    [3 x <3 x {type}>] %m, <3 x {type}> %r) #0
{
    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m2v = extractvalue [3 x <3 x {type}>] %m, 2

    %r0 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %r0
    %r1 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %r1
    %3 = fadd <3 x {type}> %2, %1
    %r2 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %r2
    %5 = fadd <3 x {type}> %4, %3

    ret <3 x {type}> %5
}

; GLSL: vec4 = mat4 * vec4
define spir_func <4 x {type}> @_Z17MatrixTimesVectorDv4_Dv4_{abbr}Dv4_{abbr}(
    [4 x <4 x {type}>] %m, <4 x {type}> %r) #0
{
    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m3v = extractvalue [4 x <4 x {type}>] %m, 3

    %r0 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %r0
    %r1 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %r1
    %3 = fadd <4 x {type}> %2, %1
    %r2 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %r2
    %5 = fadd <4 x {type}> %4, %3
    %r3 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %6 = fmul <4 x {type}> %m3v, %r3
    %7 = fadd <4 x {type}> %6, %5

    ret <4 x {type}> %7
}

; GLSL: vec2 = mat3x2 * vec3
define spir_func <2 x {type}> @_Z17MatrixTimesVectorDv3_Dv2_{abbr}Dv3_{abbr}(
    [3 x <2 x {type}>] %m, <3 x {type}> %r) #0
{
    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %m2v = extractvalue [3 x <2 x {type}>] %m, 2

    %r0 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %r0
    %r1 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %r1
    %3 = fadd <2 x {type}> %2, %1
    %r2 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %r2
    %5 = fadd <2 x {type}> %4, %3

    ret <2 x {type}> %5
}

; GLSL: vec3 = mat2x3 * vec2
define spir_func <3 x {type}> @_Z17MatrixTimesVectorDv2_Dv3_{abbr}Dv2_{abbr}(
    [2 x <3 x {type}>] %m, <2 x {type}> %r) #0
{
    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %m1v = extractvalue [2 x <3 x {type}>] %m, 1

    %r0 = shufflevector <2 x {type}> %r, <2 x {type}> %r, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %r0
    %r1 = shufflevector <2 x {type}> %r, <2 x {type}> %r, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %r1
    %3 = fadd <3 x {type}> %2, %1

    ret <3 x {type}> %3
}

; GLSL: vec2 = mat4x2 * vec4
define spir_func <2 x {type}> @_Z17MatrixTimesVectorDv4_Dv2_{abbr}Dv4_{abbr}(
    [4 x <2 x {type}>] %m, <4 x {type}> %r) #0
{
    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %m3v = extractvalue [4 x <2 x {type}>] %m, 3

    %r0 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %r0
    %r1 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %r1
    %3 = fadd <2 x {type}> %2, %1
    %r2 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %r2
    %5 = fadd <2 x {type}> %4, %3
    %r3 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <2 x i32> <i32 3, i32 3>
    %6 = fmul <2 x {type}> %m3v, %r3
    %7 = fadd <2 x {type}> %6, %5

    ret <2 x {type}> %7
}

; GLSL: vec4 = mat2x4 * vec2
define spir_func <4 x {type}> @_Z17MatrixTimesVectorDv2_Dv4_{abbr}Dv2_{abbr}(
    [2 x <4 x {type}>] %m, <2 x {type}> %r) #0
{
    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %m1v = extractvalue [2 x <4 x {type}>] %m, 1

    %r0 = shufflevector <2 x {type}> %r, <2 x {type}> %r, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %r0
    %r1 = shufflevector <2 x {type}> %r, <2 x {type}> %r, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %r1
    %3 = fadd <4 x {type}> %2, %1

    ret <4 x {type}> %3
}

; GLSL: vec3 = mat4x3 * vec4
define spir_func <3 x {type}> @_Z17MatrixTimesVectorDv4_Dv3_{abbr}Dv4_{abbr}(
    [4 x <3 x {type}>] %m, <4 x {type}> %r) #0
{
    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %m3v = extractvalue [4 x <3 x {type}>] %m, 3

    %r0 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %r0
    %r1 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %r1
    %3 = fadd <3 x {type}> %2, %1
    %r2 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %r2
    %5 = fadd <3 x {type}> %4, %3
    %r3 = shufflevector <4 x {type}> %r, <4 x {type}> %r, <3 x i32> <i32 3, i32 3, i32 3>
    %6 = fmul <3 x {type}> %m3v, %r3
    %7 = fadd <3 x {type}> %6, %5

    ret <3 x {type}> %7
}

; GLSL: vec4 = mat3x4 * vec3
define spir_func <4 x {type}> @_Z17MatrixTimesVectorDv3_Dv4_{abbr}Dv3_{abbr}(
    [3 x <4 x {type}>] %m, <3 x {type}> %r) #0
{
    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %m2v = extractvalue [3 x <4 x {type}>] %m, 2

    %r0 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %r0
    %r1 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %r1
    %3 = fadd <4 x {type}> %2, %1
    %r2 = shufflevector <3 x {type}> %r, <3 x {type}> %r, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %r2
    %5 = fadd <4 x {type}> %4, %3

    ret <4 x {type}> %5
}

; GLSL: mat2 = mat2 * mat2
define spir_func [2 x <2 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv2_{abbr}Dv2_Dv2_{abbr}(
    [2 x <2 x {type}>] %m, [2 x <2 x {type}>] %rm) #0
{
    %nm = alloca [2 x <2 x {type}>]
    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m1v = extractvalue [2 x <2 x {type}>] %m, 1

    %rm0v = extractvalue [2 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %nm0 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %3, <2 x {type}>* %nm0

    %rm1v = extractvalue [2 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %4 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %5 = fmul <2 x {type}> %m1v, %rm1v1
    %6 = fadd <2 x {type}> %5, %4

    %nm1 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %6, <2 x {type}>* %nm1

    %7 = load [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm

    ret [2 x <2 x {type}>] %7
}

; GLSL: mat3x2 = mat2 * mat3x2
define spir_func [3 x <2 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv2_{abbr}Dv3_Dv2_{abbr}(
    [2 x <2 x {type}>] %m, [3 x <2 x {type}>] %rm) #0
{
    %nm = alloca [3 x <2 x {type}>]
    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m1v = extractvalue [2 x <2 x {type}>] %m, 1

    %rm0v = extractvalue [3 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %nm0 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %3, <2 x {type}>* %nm0

    %rm1v = extractvalue [3 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %4 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %5 = fmul <2 x {type}> %m1v, %rm1v1
    %6 = fadd <2 x {type}> %5, %4

    %nm1 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %6, <2 x {type}>* %nm1

    %rm2v = extractvalue [3 x <2 x {type}>] %rm, 2
    %rm2v0 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <2 x i32> <i32 0, i32 0>
    %7 = fmul <2 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <2 x i32> <i32 1, i32 1>
    %8 = fmul <2 x {type}> %m1v, %rm2v1
    %9 = fadd <2 x {type}> %8, %7

    %nm2 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 2
    store <2 x {type}> %9, <2 x {type}>* %nm2

    %10 = load [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm

    ret [3 x <2 x {type}>] %10
}

; GLSL: mat4x2 = mat2 * mat4x2
define spir_func [4 x <2 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv2_{abbr}Dv4_Dv2_{abbr}(
    [2 x <2 x {type}>] %m, [4 x <2 x {type}>] %rm) #0
{
    %nm = alloca [4 x <2 x {type}>]
    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m1v = extractvalue [2 x <2 x {type}>] %m, 1

    %rm0v = extractvalue [4 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %nm0 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %3, <2 x {type}>* %nm0

    %rm1v = extractvalue [4 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %4 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %5 = fmul <2 x {type}> %m1v, %rm1v1
    %6 = fadd <2 x {type}> %5, %4

    %nm1 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %6, <2 x {type}>* %nm1

    %rm2v = extractvalue [4 x <2 x {type}>] %rm, 2
    %rm2v0 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <2 x i32> <i32 0, i32 0>
    %7 = fmul <2 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <2 x i32> <i32 1, i32 1>
    %8 = fmul <2 x {type}> %m1v, %rm2v1
    %9 = fadd <2 x {type}> %8, %7

    %nm2 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 2
    store <2 x {type}> %9, <2 x {type}>* %nm2

    %rm3v = extractvalue [4 x <2 x {type}>] %rm, 3
    %rm3v0 = shufflevector <2 x {type}> %rm3v, <2 x {type}> %rm3v, <2 x i32> <i32 0, i32 0>
    %10 = fmul <2 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <2 x {type}> %rm3v, <2 x {type}> %rm3v, <2 x i32> <i32 1, i32 1>
    %11 = fmul <2 x {type}> %m1v, %rm3v1
    %12 = fadd <2 x {type}> %11, %10

    %nm3 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 3
    store <2 x {type}> %12, <2 x {type}>* %nm3

    %13 = load [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm

    ret [4 x <2 x {type}>] %13
}

; GLSL: mat3 = mat3 * mat3
define spir_func [3 x <3 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv3_{abbr}Dv3_Dv3_{abbr}(
    [3 x <3 x {type}>] %m, [3 x <3 x {type}>] %rm) #0
{
    %nm = alloca [3 x <3 x {type}>]
    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m2v = extractvalue [3 x <3 x {type}>] %m, 2

    %rm0v = extractvalue [3 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %rm0v2
    %5 = fadd <3 x {type}> %4, %3

    %nm0 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %5, <3 x {type}>* %nm0

    %rm1v = extractvalue [3 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %6 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %7 = fmul <3 x {type}> %m1v, %rm1v1
    %8 = fadd <3 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 2, i32 2, i32 2>
    %9 = fmul <3 x {type}> %m2v, %rm1v2
    %10 = fadd <3 x {type}> %9, %8

    %nm1 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %10, <3 x {type}>* %nm1

    %rm2v = extractvalue [3 x <3 x {type}>] %rm, 2
    %rm2v0 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <3 x i32> <i32 0, i32 0, i32 0>
    %11 = fmul <3 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <3 x i32> <i32 1, i32 1, i32 1>
    %12 = fmul <3 x {type}> %m1v, %rm2v1
    %13 = fadd <3 x {type}> %12, %11

    %rm2v2 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <3 x i32> <i32 2, i32 2, i32 2>
    %14 = fmul <3 x {type}> %m2v, %rm2v2
    %15 = fadd <3 x {type}> %14, %13

    %nm2 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 2
    store <3 x {type}> %15, <3 x {type}>* %nm2

    %16 = load [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm

    ret [3 x <3 x {type}>] %16
}

; GLSL: mat2x3 = mat3 * mat2x3
define spir_func [2 x <3 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv3_{abbr}Dv2_Dv3_{abbr}(
    [3 x <3 x {type}>] %m, [2 x <3 x {type}>] %rm) #0
{
    %nm = alloca [2 x <3 x {type}>]
    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m2v = extractvalue [3 x <3 x {type}>] %m, 2

    %rm0v = extractvalue [2 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %rm0v2
    %5 = fadd <3 x {type}> %4, %3

    %nm0 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %5, <3 x {type}>* %nm0

    %rm1v = extractvalue [2 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %6 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %7 = fmul <3 x {type}> %m1v, %rm1v1
    %8 = fadd <3 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 2, i32 2, i32 2>
    %9 = fmul <3 x {type}> %m2v, %rm1v2
    %10 = fadd <3 x {type}> %9, %8

    %nm1 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %10, <3 x {type}>* %nm1

    %11 = load [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm

    ret [2 x <3 x {type}>] %11
}

; GLSL: mat4x3 = mat3 * mat4x3
define spir_func [4 x <3 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv3_{abbr}Dv4_Dv3_{abbr}(
    [3 x <3 x {type}>] %m, [4 x <3 x {type}>] %rm) #0
{
    %nm = alloca [4 x <3 x {type}>]
    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m2v = extractvalue [3 x <3 x {type}>] %m, 2

    %rm0v = extractvalue [4 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %rm0v2
    %5 = fadd <3 x {type}> %4, %3

    %nm0 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %5, <3 x {type}>* %nm0

    %rm1v = extractvalue [4 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %6 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %7 = fmul <3 x {type}> %m1v, %rm1v1
    %8 = fadd <3 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <3 x i32> <i32 2, i32 2, i32 2>
    %9 = fmul <3 x {type}> %m2v, %rm1v2
    %10 = fadd <3 x {type}> %9, %8

    %nm1 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %10, <3 x {type}>* %nm1

    %rm2v = extractvalue [4 x <3 x {type}>] %rm, 2
    %rm2v0 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <3 x i32> <i32 0, i32 0, i32 0>
    %11 = fmul <3 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <3 x i32> <i32 1, i32 1, i32 1>
    %12 = fmul <3 x {type}> %m1v, %rm2v1
    %13 = fadd <3 x {type}> %12, %11

    %rm2v2 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <3 x i32> <i32 2, i32 2, i32 2>
    %14 = fmul <3 x {type}> %m2v, %rm2v2
    %15 = fadd <3 x {type}> %14, %13

    %nm2 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 2
    store <3 x {type}> %15, <3 x {type}>* %nm2

    %rm3v = extractvalue [4 x <3 x {type}>] %rm, 3
    %rm3v0 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <3 x i32> <i32 0, i32 0, i32 0>
    %16 = fmul <3 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <3 x i32> <i32 1, i32 1, i32 1>
    %17 = fmul <3 x {type}> %m1v, %rm3v1
    %18 = fadd <3 x {type}> %17, %16

    %rm3v2 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <3 x i32> <i32 2, i32 2, i32 2>
    %19 = fmul <3 x {type}> %m2v, %rm3v2
    %20 = fadd <3 x {type}> %19, %18

    %nm3 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 3
    store <3 x {type}> %20, <3 x {type}>* %nm3

    %21 = load [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm

    ret [4 x <3 x {type}>] %21
}

; GLSL: mat4 = mat4 * mat4
define spir_func [4 x <4 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv4_{abbr}Dv4_Dv4_{abbr}(
    [4 x <4 x {type}>] %m, [4 x <4 x {type}>] %rm) #0
{
    %nm = alloca [4 x <4 x {type}>]
    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m3v = extractvalue [4 x <4 x {type}>] %m, 3

    %rm0v = extractvalue [4 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %rm0v2
    %5 = fadd <4 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %6 = fmul <4 x {type}> %m3v, %rm0v3
    %7 = fadd <4 x {type}> %6, %5

    %nm0 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %7, <4 x {type}>* %nm0

    %rm1v = extractvalue [4 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %8 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %9 = fmul <4 x {type}> %m1v, %rm1v1
    %10 = fadd <4 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %11 = fmul <4 x {type}> %m2v, %rm1v2
    %12 = fadd <4 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %13 = fmul <4 x {type}> %m3v, %rm1v3
    %14 = fadd <4 x {type}> %13, %12

    %nm1 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %14, <4 x {type}>* %nm1

    %rm2v = extractvalue [4 x <4 x {type}>] %rm, 2
    %rm2v0 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %15 = fmul <4 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %16 = fmul <4 x {type}> %m1v, %rm2v1
    %17 = fadd <4 x {type}> %16, %15

    %rm2v2 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %18 = fmul <4 x {type}> %m2v, %rm2v2
    %19 = fadd <4 x {type}> %18, %17

    %rm2v3 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %20 = fmul <4 x {type}> %m3v, %rm2v3
    %21 = fadd <4 x {type}> %20, %19

    %nm2 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 2
    store <4 x {type}> %21, <4 x {type}>* %nm2

    %rm3v = extractvalue [4 x <4 x {type}>] %rm, 3
    %rm3v0 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %22 = fmul <4 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %23 = fmul <4 x {type}> %m1v, %rm3v1
    %24 = fadd <4 x {type}> %23, %22

    %rm3v2 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %25 = fmul <4 x {type}> %m2v, %rm3v2
    %26 = fadd <4 x {type}> %25, %24

    %rm3v3 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %27 = fmul <4 x {type}> %m3v, %rm3v3
    %28 = fadd <4 x {type}> %27, %26

    %nm3 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 3
    store <4 x {type}> %28, <4 x {type}>* %nm3

    %29 = load [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm

    ret [4 x <4 x {type}>] %29
}

; GLSL: mat2x4 = mat4 * mat2x4
define spir_func [2 x <4 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv4_{abbr}Dv2_Dv4_{abbr}(
    [4 x <4 x {type}>] %m, [2 x <4 x {type}>] %rm) #0
{
    %nm = alloca [2 x <4 x {type}>]
    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m3v = extractvalue [4 x <4 x {type}>] %m, 3

    %rm0v = extractvalue [2 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %rm0v2
    %5 = fadd <4 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %6 = fmul <4 x {type}> %m3v, %rm0v3
    %7 = fadd <4 x {type}> %6, %5

    %nm0 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %7, <4 x {type}>* %nm0

    %rm1v = extractvalue [2 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %8 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %9 = fmul <4 x {type}> %m1v, %rm1v1
    %10 = fadd <4 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %11 = fmul <4 x {type}> %m2v, %rm1v2
    %12 = fadd <4 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %13 = fmul <4 x {type}> %m3v, %rm1v3
    %14 = fadd <4 x {type}> %13, %12

    %nm1 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %14, <4 x {type}>* %nm1

    %15 = load [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm

    ret [2 x <4 x {type}>] %15
}

; GLSL: mat3x4 = mat4 * mat3x4
define spir_func [3 x <4 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv4_{abbr}Dv3_Dv4_{abbr}(
    [4 x <4 x {type}>] %m, [3 x <4 x {type}>] %rm) #0
{
    %nm = alloca [3 x <4 x {type}>]
    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m3v = extractvalue [4 x <4 x {type}>] %m, 3

    %rm0v = extractvalue [3 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %rm0v2
    %5 = fadd <4 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %6 = fmul <4 x {type}> %m3v, %rm0v3
    %7 = fadd <4 x {type}> %6, %5

    %nm0 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %7, <4 x {type}>* %nm0

    %rm1v = extractvalue [3 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %8 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %9 = fmul <4 x {type}> %m1v, %rm1v1
    %10 = fadd <4 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %11 = fmul <4 x {type}> %m2v, %rm1v2
    %12 = fadd <4 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %13 = fmul <4 x {type}> %m3v, %rm1v3
    %14 = fadd <4 x {type}> %13, %12

    %nm1 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %14, <4 x {type}>* %nm1

    %rm2v = extractvalue [3 x <4 x {type}>] %rm, 2
    %rm2v0 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %15 = fmul <4 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %16 = fmul <4 x {type}> %m1v, %rm2v1
    %17 = fadd <4 x {type}> %16, %15

    %rm2v2 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %18 = fmul <4 x {type}> %m2v, %rm2v2
    %19 = fadd <4 x {type}> %18, %17

    %rm2v3 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
    %20 = fmul <4 x {type}> %m3v, %rm2v3
    %21 = fadd <4 x {type}> %20, %19

    %nm2 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 2
    store <4 x {type}> %21, <4 x {type}>* %nm2

    %22 = load [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm

    ret [3 x <4 x {type}>] %22
}

; GLSL: mat2 = mat3x2 * mat2x3
define spir_func [2 x <2 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv2_{abbr}Dv2_Dv3_{abbr}(
    [3 x <2 x {type}>] %m, [2 x <3 x {type}>] %rm) #0
{
    %nm = alloca [2 x <2 x {type}>]
    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %m2v = extractvalue [3 x <2 x {type}>] %m, 2

    %rm0v = extractvalue [2 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %rm0v2
    %5 = fadd <2 x {type}> %4, %3

    %nm0 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %5, <2 x {type}>* %nm0

    %rm1v = extractvalue [2 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %6 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %7 = fmul <2 x {type}> %m1v, %rm1v1
    %8 = fadd <2 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 2, i32 2>
    %9 = fmul <2 x {type}> %m2v, %rm1v2
    %10 = fadd <2 x {type}> %9, %8

    %nm1 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %10, <2 x {type}>* %nm1

    %11 = load [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm

    ret [2 x <2 x {type}>] %11
}

; GLSL: mat3x2 = mat3x2 * mat3
define spir_func [3 x <2 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv2_{abbr}Dv3_Dv3_{abbr}(
    [3 x <2 x {type}>] %m, [3 x <3 x {type}>] %rm) #0
{
    %nm = alloca [3 x <2 x {type}>]
    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %m2v = extractvalue [3 x <2 x {type}>] %m, 2

    %rm0v = extractvalue [3 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %rm0v2
    %5 = fadd <2 x {type}> %4, %3

    %nm0 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %5, <2 x {type}>* %nm0

    %rm1v = extractvalue [3 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %6 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %7 = fmul <2 x {type}> %m1v, %rm1v1
    %8 = fadd <2 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 2, i32 2>
    %9 = fmul <2 x {type}> %m2v, %rm1v2
    %10 = fadd <2 x {type}> %9, %8

    %nm1 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %10, <2 x {type}>* %nm1

    %rm2v = extractvalue [3 x <3 x {type}>] %rm, 2
    %rm2v0 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <2 x i32> <i32 0, i32 0>
    %11 = fmul <2 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <2 x i32> <i32 1, i32 1>
    %12 = fmul <2 x {type}> %m1v, %rm2v1
    %13 = fadd <2 x {type}> %12, %11

    %rm2v2 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <2 x i32> <i32 2, i32 2>
    %14 = fmul <2 x {type}> %m2v, %rm2v2
    %15 = fadd <2 x {type}> %14, %13

    %nm2 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 2
    store <2 x {type}> %15, <2 x {type}>* %nm2

    %16 = load [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm

    ret [3 x <2 x {type}>] %16
}

; GLSL: mat4x2 = mat3x2 * mat4x3
define spir_func [4 x <2 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv2_{abbr}Dv4_Dv3_{abbr}(
    [3 x <2 x {type}>] %m, [4 x <3 x {type}>] %rm) #0
{
    %nm = alloca [4 x <2 x {type}>]
    %m0v = extractvalue [3 x <2 x {type}>] %m, 0
    %m1v = extractvalue [3 x <2 x {type}>] %m, 1
    %m2v = extractvalue [3 x <2 x {type}>] %m, 2

    %rm0v = extractvalue [4 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %rm0v2
    %5 = fadd <2 x {type}> %4, %3

    %nm0 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %5, <2 x {type}>* %nm0

    %rm1v = extractvalue [4 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %6 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %7 = fmul <2 x {type}> %m1v, %rm1v1
    %8 = fadd <2 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <2 x i32> <i32 2, i32 2>
    %9 = fmul <2 x {type}> %m2v, %rm1v2
    %10 = fadd <2 x {type}> %9, %8

    %nm1 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %10, <2 x {type}>* %nm1

    %rm2v = extractvalue [4 x <3 x {type}>] %rm, 2
    %rm2v0 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <2 x i32> <i32 0, i32 0>
    %11 = fmul <2 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <2 x i32> <i32 1, i32 1>
    %12 = fmul <2 x {type}> %m1v, %rm2v1
    %13 = fadd <2 x {type}> %12, %11

    %rm2v2 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <2 x i32> <i32 2, i32 2>
    %14 = fmul <2 x {type}> %m2v, %rm2v2
    %15 = fadd <2 x {type}> %14, %13

    %nm2 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 2
    store <2 x {type}> %15, <2 x {type}>* %nm2

    %rm3v = extractvalue [4 x <3 x {type}>] %rm, 3
    %rm3v0 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <2 x i32> <i32 0, i32 0>
    %16 = fmul <2 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <2 x i32> <i32 1, i32 1>
    %17 = fmul <2 x {type}> %m1v, %rm3v1
    %18 = fadd <2 x {type}> %17, %16

    %rm3v2 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <2 x i32> <i32 2, i32 2>
    %19 = fmul <2 x {type}> %m2v, %rm3v2
    %20 = fadd <2 x {type}> %19, %18

    %nm3 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 3
    store <2 x {type}> %20, <2 x {type}>* %nm3

    %21 = load [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm

    ret [4 x <2 x {type}>] %21
}

; GLSL: mat2x3 = mat2x3 * mat2
define spir_func [2 x <3 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv3_{abbr}Dv2_Dv2_{abbr}(
    [2 x <3 x {type}>] %m, [2 x <2 x {type}>] %rm) #0
{
    %nm = alloca [2 x <3 x {type}>]
    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %m1v = extractvalue [2 x <3 x {type}>] %m, 1

    %rm0v = extractvalue [2 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %nm0 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %3, <3 x {type}>* %nm0

    %rm1v = extractvalue [2 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %4 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %5 = fmul <3 x {type}> %m1v, %rm1v1
    %6 = fadd <3 x {type}> %5, %4

    %nm1 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %6, <3 x {type}>* %nm1

    %7 = load [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm

    ret [2 x <3 x {type}>] %7
}

; GLSL: mat3 = mat2x3 * mat3x2
define spir_func [3 x <3 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv3_{abbr}Dv3_Dv2_{abbr}(
    [2 x <3 x {type}>] %m, [3 x <2 x {type}>] %rm) #0
{
    %nm = alloca [3 x <3 x {type}>]
    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %m1v = extractvalue [2 x <3 x {type}>] %m, 1

    %rm0v = extractvalue [3 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %nm0 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %3, <3 x {type}>* %nm0

    %rm1v = extractvalue [3 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %4 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %5 = fmul <3 x {type}> %m1v, %rm1v1
    %6 = fadd <3 x {type}> %5, %4

    %nm1 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %6, <3 x {type}>* %nm1

    %rm2v = extractvalue [3 x <2 x {type}>] %rm, 2
    %rm2v0 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <3 x i32> <i32 0, i32 0, i32 0>
    %7 = fmul <3 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <3 x i32> <i32 1, i32 1, i32 1>
    %8 = fmul <3 x {type}> %m1v, %rm2v1
    %9 = fadd <3 x {type}> %8, %7

    %nm2 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 2
    store <3 x {type}> %9, <3 x {type}>* %nm2

    %10 = load [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm

    ret [3 x <3 x {type}>] %10
}

; GLSL: mat4x3 = mat2x3 * mat4x2
define spir_func [4 x <3 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv3_{abbr}Dv4_Dv2_{abbr}(
    [2 x <3 x {type}>] %m, [4 x <2 x {type}>] %rm) #0
{
    %nm = alloca [4 x <3 x {type}>]
    %m0v = extractvalue [2 x <3 x {type}>] %m, 0
    %m1v = extractvalue [2 x <3 x {type}>] %m, 1

    %rm0v = extractvalue [4 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %nm0 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %3, <3 x {type}>* %nm0

    %rm1v = extractvalue [4 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %4 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %5 = fmul <3 x {type}> %m1v, %rm1v1
    %6 = fadd <3 x {type}> %5, %4

    %nm1 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %6, <3 x {type}>* %nm1

    %rm2v = extractvalue [4 x <2 x {type}>] %rm, 2
    %rm2v0 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <3 x i32> <i32 0, i32 0, i32 0>
    %7 = fmul <3 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <3 x i32> <i32 1, i32 1, i32 1>
    %8 = fmul <3 x {type}> %m1v, %rm2v1
    %9 = fadd <3 x {type}> %8, %7

    %nm2 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 2
    store <3 x {type}> %9, <3 x {type}>* %nm2

    %rm3v = extractvalue [4 x <2 x {type}>] %rm, 3
    %rm3v0 = shufflevector <2 x {type}> %rm3v, <2 x {type}> %rm3v, <3 x i32> <i32 0, i32 0, i32 0>
    %10 = fmul <3 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <2 x {type}> %rm3v, <2 x {type}> %rm3v, <3 x i32> <i32 1, i32 1, i32 1>
    %11 = fmul <3 x {type}> %m1v, %rm3v1
    %12 = fadd <3 x {type}> %11, %10

    %nm3 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 3
    store <3 x {type}> %12, <3 x {type}>* %nm3

    %13 = load [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm

    ret [4 x <3 x {type}>] %13
}

; GLSL: mat2 = mat4x2 * mat2x4
define spir_func [2 x <2 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv2_{abbr}Dv2_Dv4_{abbr}(
    [4 x <2 x {type}>] %m, [2 x <4 x {type}>] %rm) #0
{
    %nm = alloca [2 x <2 x {type}>]
    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %m3v = extractvalue [4 x <2 x {type}>] %m, 3

    %rm0v = extractvalue [2 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %rm0v2
    %5 = fadd <2 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 3, i32 3>
    %6 = fmul <2 x {type}> %m3v, %rm0v3
    %7 = fadd <2 x {type}> %6, %5

    %nm0 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %7, <2 x {type}>* %nm0

    %rm1v = extractvalue [2 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %8 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %9 = fmul <2 x {type}> %m1v, %rm1v1
    %10 = fadd <2 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 2, i32 2>
    %11 = fmul <2 x {type}> %m2v, %rm1v2
    %12 = fadd <2 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 3, i32 3>
    %13 = fmul <2 x {type}> %m3v, %rm1v3
    %14 = fadd <2 x {type}> %13, %12

    %nm1 = getelementptr inbounds [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %14, <2 x {type}>* %nm1

    %15 = load [2 x <2 x {type}>], [2 x <2 x {type}>]* %nm

    ret [2 x <2 x {type}>] %15
}

; GLSL: mat3x2 = mat4x2 * mat3x4
define spir_func [3 x <2 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv2_{abbr}Dv3_Dv4_{abbr}(
    [4 x <2 x {type}>] %m, [3 x <4 x {type}>] %rm) #0
{
    %nm = alloca [3 x <2 x {type}>]
    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %m3v = extractvalue [4 x <2 x {type}>] %m, 3

    %rm0v = extractvalue [3 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %rm0v2
    %5 = fadd <2 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 3, i32 3>
    %6 = fmul <2 x {type}> %m3v, %rm0v3
    %7 = fadd <2 x {type}> %6, %5

    %nm0 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %7, <2 x {type}>* %nm0

    %rm1v = extractvalue [3 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %8 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %9 = fmul <2 x {type}> %m1v, %rm1v1
    %10 = fadd <2 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 2, i32 2>
    %11 = fmul <2 x {type}> %m2v, %rm1v2
    %12 = fadd <2 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 3, i32 3>
    %13 = fmul <2 x {type}> %m3v, %rm1v3
    %14 = fadd <2 x {type}> %13, %12

    %nm1 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %14, <2 x {type}>* %nm1

    %rm2v = extractvalue [3 x <4 x {type}>] %rm, 2
    %rm2v0 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 0, i32 0>
    %15 = fmul <2 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 1, i32 1>
    %16 = fmul <2 x {type}> %m1v, %rm2v1
    %17 = fadd <2 x {type}> %16, %15

    %rm2v2 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 2, i32 2>
    %18 = fmul <2 x {type}> %m2v, %rm2v2
    %19 = fadd <2 x {type}> %18, %17

    %rm2v3 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 3, i32 3>
    %20 = fmul <2 x {type}> %m3v, %rm2v3
    %21 = fadd <2 x {type}> %20, %19

    %nm2 = getelementptr inbounds [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm, i32 0, i32 2
    store <2 x {type}> %21, <2 x {type}>* %nm2

    %22 = load [3 x <2 x {type}>], [3 x <2 x {type}>]* %nm

    ret [3 x <2 x {type}>] %22
}

; GLSL: mat4x2 = mat4x2 * mat4
define spir_func [4 x <2 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv2_{abbr}Dv4_Dv4_{abbr}(
    [4 x <2 x {type}>] %m, [4 x <4 x {type}>] %rm) #0
{
    %nm = alloca [4 x <2 x {type}>]
    %m0v = extractvalue [4 x <2 x {type}>] %m, 0
    %m1v = extractvalue [4 x <2 x {type}>] %m, 1
    %m2v = extractvalue [4 x <2 x {type}>] %m, 2
    %m3v = extractvalue [4 x <2 x {type}>] %m, 3

    %rm0v = extractvalue [4 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 0, i32 0>
    %1 = fmul <2 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 1, i32 1>
    %2 = fmul <2 x {type}> %m1v, %rm0v1
    %3 = fadd <2 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 2, i32 2>
    %4 = fmul <2 x {type}> %m2v, %rm0v2
    %5 = fadd <2 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <2 x i32> <i32 3, i32 3>
    %6 = fmul <2 x {type}> %m3v, %rm0v3
    %7 = fadd <2 x {type}> %6, %5

    %nm0 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 0
    store <2 x {type}> %7, <2 x {type}>* %nm0

    %rm1v = extractvalue [4 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 0, i32 0>
    %8 = fmul <2 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 1, i32 1>
    %9 = fmul <2 x {type}> %m1v, %rm1v1
    %10 = fadd <2 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 2, i32 2>
    %11 = fmul <2 x {type}> %m2v, %rm1v2
    %12 = fadd <2 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <2 x i32> <i32 3, i32 3>
    %13 = fmul <2 x {type}> %m3v, %rm1v3
    %14 = fadd <2 x {type}> %13, %12

    %nm1 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 1
    store <2 x {type}> %14, <2 x {type}>* %nm1

    %rm2v = extractvalue [4 x <4 x {type}>] %rm, 2
    %rm2v0 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 0, i32 0>
    %15 = fmul <2 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 1, i32 1>
    %16 = fmul <2 x {type}> %m1v, %rm2v1
    %17 = fadd <2 x {type}> %16, %15

    %rm2v2 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 2, i32 2>
    %18 = fmul <2 x {type}> %m2v, %rm2v2
    %19 = fadd <2 x {type}> %18, %17

    %rm2v3 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <2 x i32> <i32 3, i32 3>
    %20 = fmul <2 x {type}> %m3v, %rm2v3
    %21 = fadd <2 x {type}> %20, %19

    %nm2 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 2
    store <2 x {type}> %21, <2 x {type}>* %nm2

    %rm3v = extractvalue [4 x <4 x {type}>] %rm, 3
    %rm3v0 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <2 x i32> <i32 0, i32 0>
    %22 = fmul <2 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <2 x i32> <i32 1, i32 1>
    %23 = fmul <2 x {type}> %m1v, %rm3v1
    %24 = fadd <2 x {type}> %23, %22

    %rm3v2 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <2 x i32> <i32 2, i32 2>
    %25 = fmul <2 x {type}> %m2v, %rm3v2
    %26 = fadd <2 x {type}> %25, %24

    %rm3v3 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <2 x i32> <i32 3, i32 3>
    %27 = fmul <2 x {type}> %m3v, %rm3v3
    %28 = fadd <2 x {type}> %27, %26

    %nm3 = getelementptr inbounds [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm, i32 0, i32 3
    store <2 x {type}> %28, <2 x {type}>* %nm3

    %29 = load [4 x <2 x {type}>], [4 x <2 x {type}>]* %nm

    ret [4 x <2 x {type}>] %29
}

; GLSL: mat2x4 = mat2x4 * mat2
define spir_func [2 x <4 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv4_{abbr}Dv2_Dv2_{abbr}(
    [2 x <4 x {type}>] %m, [2 x <2 x {type}>] %rm) #0
{
    %nm = alloca [2 x <4 x {type}>]
    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %m1v = extractvalue [2 x <4 x {type}>] %m, 1

    %rm0v = extractvalue [2 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %nm0 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %3, <4 x {type}>* %nm0

    %rm1v = extractvalue [2 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %4 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %5 = fmul <4 x {type}> %m1v, %rm1v1
    %6 = fadd <4 x {type}> %5, %4

    %nm1 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %6, <4 x {type}>* %nm1

    %7 = load [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm

    ret [2 x <4 x {type}>] %7
}

; GLSL: mat3x4 = mat2x4 * mat3x2
define spir_func [3 x <4 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv4_{abbr}Dv3_Dv2_{abbr}(
    [2 x <4 x {type}>] %m, [3 x <2 x {type}>] %rm) #0
{
    %nm = alloca [3 x <4 x {type}>]
    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %m1v = extractvalue [2 x <4 x {type}>] %m, 1

    %rm0v = extractvalue [3 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %nm0 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %3, <4 x {type}>* %nm0

    %rm1v = extractvalue [3 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %4 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %5 = fmul <4 x {type}> %m1v, %rm1v1
    %6 = fadd <4 x {type}> %5, %4

    %nm1 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %6, <4 x {type}>* %nm1

    %rm2v = extractvalue [3 x <2 x {type}>] %rm, 2
    %rm2v0 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %7 = fmul <4 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %8 = fmul <4 x {type}> %m1v, %rm2v1
    %9 = fadd <4 x {type}> %8, %7

    %nm2 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 2
    store <4 x {type}> %9, <4 x {type}>* %nm2

    %10 = load [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm

    ret [3 x <4 x {type}>] %10
}

; GLSL: mat4 = mat2x4 * mat4x2
define spir_func [4 x <4 x {type}>] @_Z17MatrixTimesMatrixDv2_Dv4_{abbr}Dv4_Dv2_{abbr}(
    [2 x <4 x {type}>] %m, [4 x <2 x {type}>] %rm) #0
{
    %nm = alloca [4 x <4 x {type}>]
    %m0v = extractvalue [2 x <4 x {type}>] %m, 0
    %m1v = extractvalue [2 x <4 x {type}>] %m, 1

    %rm0v = extractvalue [4 x <2 x {type}>] %rm, 0
    %rm0v0 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <2 x {type}> %rm0v, <2 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %nm0 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %3, <4 x {type}>* %nm0

    %rm1v = extractvalue [4 x <2 x {type}>] %rm, 1
    %rm1v0 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %4 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <2 x {type}> %rm1v, <2 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %5 = fmul <4 x {type}> %m1v, %rm1v1
    %6 = fadd <4 x {type}> %5, %4

    %nm1 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %6, <4 x {type}>* %nm1

    %rm2v = extractvalue [4 x <2 x {type}>] %rm, 2
    %rm2v0 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %7 = fmul <4 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <2 x {type}> %rm2v, <2 x {type}> %rm2v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %8 = fmul <4 x {type}> %m1v, %rm2v1
    %9 = fadd <4 x {type}> %8, %7

    %nm2 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 2
    store <4 x {type}> %9, <4 x {type}>* %nm2

    %rm3v = extractvalue [4 x <2 x {type}>] %rm, 3
    %rm3v0 = shufflevector <2 x {type}> %rm3v, <2 x {type}> %rm3v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %10 = fmul <4 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <2 x {type}> %rm3v, <2 x {type}> %rm3v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %11 = fmul <4 x {type}> %m1v, %rm3v1
    %12 = fadd <4 x {type}> %11, %10

    %nm3 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 3
    store <4 x {type}> %12, <4 x {type}>* %nm3

    %13 = load [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm

    ret [4 x <4 x {type}>] %13
}

; GLSL: mat2x3 = mat4x3 * mat2x4
define spir_func [2 x <3 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv3_{abbr}Dv2_Dv4_{abbr}(
    [4 x <3 x {type}>] %m, [2 x <4 x {type}>] %rm) #0
{
    %nm = alloca [2 x <3 x {type}>]
    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %m3v = extractvalue [4 x <3 x {type}>] %m, 3

    %rm0v = extractvalue [2 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %rm0v2
    %5 = fadd <3 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 3, i32 3, i32 3>
    %6 = fmul <3 x {type}> %m3v, %rm0v3
    %7 = fadd <3 x {type}> %6, %5

    %nm0 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %7, <3 x {type}>* %nm0

    %rm1v = extractvalue [2 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %8 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %9 = fmul <3 x {type}> %m1v, %rm1v1
    %10 = fadd <3 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 2, i32 2, i32 2>
    %11 = fmul <3 x {type}> %m2v, %rm1v2
    %12 = fadd <3 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 3, i32 3, i32 3>
    %13 = fmul <3 x {type}> %m3v, %rm1v3
    %14 = fadd <3 x {type}> %13, %12

    %nm1 = getelementptr inbounds [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %14, <3 x {type}>* %nm1

    %15 = load [2 x <3 x {type}>], [2 x <3 x {type}>]* %nm

    ret [2 x <3 x {type}>] %15
}

; GLSL: mat3 = mat4x3 * mat3x4
define spir_func [3 x <3 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv3_{abbr}Dv3_Dv4_{abbr}(
    [4 x <3 x {type}>] %m, [3 x <4 x {type}>] %rm) #0
{
    %nm = alloca [3 x <3 x {type}>]
    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %m3v = extractvalue [4 x <3 x {type}>] %m, 3

    %rm0v = extractvalue [3 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %rm0v2
    %5 = fadd <3 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 3, i32 3, i32 3>
    %6 = fmul <3 x {type}> %m3v, %rm0v3
    %7 = fadd <3 x {type}> %6, %5

    %nm0 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %7, <3 x {type}>* %nm0

    %rm1v = extractvalue [3 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %8 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %9 = fmul <3 x {type}> %m1v, %rm1v1
    %10 = fadd <3 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 2, i32 2, i32 2>
    %11 = fmul <3 x {type}> %m2v, %rm1v2
    %12 = fadd <3 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 3, i32 3, i32 3>
    %13 = fmul <3 x {type}> %m3v, %rm1v3
    %14 = fadd <3 x {type}> %13, %12

    %nm1 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %14, <3 x {type}>* %nm1

    %rm2v = extractvalue [3 x <4 x {type}>] %rm, 2
    %rm2v0 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 0, i32 0, i32 0>
    %15 = fmul <3 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 1, i32 1, i32 1>
    %16 = fmul <3 x {type}> %m1v, %rm2v1
    %17 = fadd <3 x {type}> %16, %15

    %rm2v2 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 2, i32 2, i32 2>
    %18 = fmul <3 x {type}> %m2v, %rm2v2
    %19 = fadd <3 x {type}> %18, %17

    %rm2v3 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 3, i32 3, i32 3>
    %20 = fmul <3 x {type}> %m3v, %rm2v3
    %21 = fadd <3 x {type}> %20, %19

    %nm2 = getelementptr inbounds [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm, i32 0, i32 2
    store <3 x {type}> %21, <3 x {type}>* %nm2

    %22 = load [3 x <3 x {type}>], [3 x <3 x {type}>]* %nm

    ret [3 x <3 x {type}>] %22
}

; GLSL: mat4x3 = mat4x3 * mat4
define spir_func [4 x <3 x {type}>] @_Z17MatrixTimesMatrixDv4_Dv3_{abbr}Dv4_Dv4_{abbr}(
    [4 x <3 x {type}>] %m, [4 x <4 x {type}>] %rm) #0
{
    %nm = alloca [4 x <3 x {type}>]
    %m0v = extractvalue [4 x <3 x {type}>] %m, 0
    %m1v = extractvalue [4 x <3 x {type}>] %m, 1
    %m2v = extractvalue [4 x <3 x {type}>] %m, 2
    %m3v = extractvalue [4 x <3 x {type}>] %m, 3

    %rm0v = extractvalue [4 x <4 x {type}>] %rm, 0
    %rm0v0 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 0, i32 0, i32 0>
    %1 = fmul <3 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 1, i32 1, i32 1>
    %2 = fmul <3 x {type}> %m1v, %rm0v1
    %3 = fadd <3 x {type}> %2, %1

    %rm0v2 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 2, i32 2, i32 2>
    %4 = fmul <3 x {type}> %m2v, %rm0v2
    %5 = fadd <3 x {type}> %4, %3

    %rm0v3 = shufflevector <4 x {type}> %rm0v, <4 x {type}> %rm0v, <3 x i32> <i32 3, i32 3, i32 3>
    %6 = fmul <3 x {type}> %m3v, %rm0v3
    %7 = fadd <3 x {type}> %6, %5

    %nm0 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 0
    store <3 x {type}> %7, <3 x {type}>* %nm0

    %rm1v = extractvalue [4 x <4 x {type}>] %rm, 1
    %rm1v0 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 0, i32 0, i32 0>
    %8 = fmul <3 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 1, i32 1, i32 1>
    %9 = fmul <3 x {type}> %m1v, %rm1v1
    %10 = fadd <3 x {type}> %9, %8

    %rm1v2 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 2, i32 2, i32 2>
    %11 = fmul <3 x {type}> %m2v, %rm1v2
    %12 = fadd <3 x {type}> %11, %10

    %rm1v3 = shufflevector <4 x {type}> %rm1v, <4 x {type}> %rm1v, <3 x i32> <i32 3, i32 3, i32 3>
    %13 = fmul <3 x {type}> %m3v, %rm1v3
    %14 = fadd <3 x {type}> %13, %12

    %nm1 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 1
    store <3 x {type}> %14, <3 x {type}>* %nm1

    %rm2v = extractvalue [4 x <4 x {type}>] %rm, 2
    %rm2v0 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 0, i32 0, i32 0>
    %15 = fmul <3 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 1, i32 1, i32 1>
    %16 = fmul <3 x {type}> %m1v, %rm2v1
    %17 = fadd <3 x {type}> %16, %15

    %rm2v2 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 2, i32 2, i32 2>
    %18 = fmul <3 x {type}> %m2v, %rm2v2
    %19 = fadd <3 x {type}> %18, %17

    %rm2v3 = shufflevector <4 x {type}> %rm2v, <4 x {type}> %rm2v, <3 x i32> <i32 3, i32 3, i32 3>
    %20 = fmul <3 x {type}> %m3v, %rm2v3
    %21 = fadd <3 x {type}> %20, %19

    %nm2 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 2
    store <3 x {type}> %21, <3 x {type}>* %nm2

    %rm3v = extractvalue [4 x <4 x {type}>] %rm, 3
    %rm3v0 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <3 x i32> <i32 0, i32 0, i32 0>
    %22 = fmul <3 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <3 x i32> <i32 1, i32 1, i32 1>
    %23 = fmul <3 x {type}> %m1v, %rm3v1
    %24 = fadd <3 x {type}> %23, %22

    %rm3v2 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <3 x i32> <i32 2, i32 2, i32 2>
    %25 = fmul <3 x {type}> %m2v, %rm3v2
    %26 = fadd <3 x {type}> %25, %24

    %rm3v3 = shufflevector <4 x {type}> %rm3v, <4 x {type}> %rm3v, <3 x i32> <i32 3, i32 3, i32 3>
    %27 = fmul <3 x {type}> %m3v, %rm3v3
    %28 = fadd <3 x {type}> %27, %26

    %nm3 = getelementptr inbounds [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm, i32 0, i32 3
    store <3 x {type}> %28, <3 x {type}>* %nm3

    %29 = load [4 x <3 x {type}>], [4 x <3 x {type}>]* %nm

    ret [4 x <3 x {type}>] %29
}

; GLSL: mat2x4 = mat3x4 * mat2x3
define spir_func [2 x <4 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv4_{abbr}Dv2_Dv3_{abbr}(
    [3 x <4 x {type}>] %m, [2 x <3 x {type}>] %rm) #0
{
    %nm = alloca [2 x <4 x {type}>]
    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %m2v = extractvalue [3 x <4 x {type}>] %m, 2

    %rm0v = extractvalue [2 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %rm0v2
    %5 = fadd <4 x {type}> %4, %3

    %nm0 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %5, <4 x {type}>* %nm0

    %rm1v = extractvalue [2 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %6 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %7 = fmul <4 x {type}> %m1v, %rm1v1
    %8 = fadd <4 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %9 = fmul <4 x {type}> %m2v, %rm1v2
    %10 = fadd <4 x {type}> %9, %8

    %nm1 = getelementptr inbounds [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %10, <4 x {type}>* %nm1

    %11 = load [2 x <4 x {type}>], [2 x <4 x {type}>]* %nm

    ret [2 x <4 x {type}>] %11
}

; GLSL: mat3x4 = mat3x4 * mat3
define spir_func [3 x <4 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv4_{abbr}Dv3_Dv3_{abbr}(
    [3 x <4 x {type}>] %m, [3 x <3 x {type}>] %rm) #0
{
    %nm = alloca [3 x <4 x {type}>]
    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %m2v = extractvalue [3 x <4 x {type}>] %m, 2

    %rm0v = extractvalue [3 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %rm0v2
    %5 = fadd <4 x {type}> %4, %3

    %nm0 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %5, <4 x {type}>* %nm0

    %rm1v = extractvalue [3 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %6 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %7 = fmul <4 x {type}> %m1v, %rm1v1
    %8 = fadd <4 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %9 = fmul <4 x {type}> %m2v, %rm1v2
    %10 = fadd <4 x {type}> %9, %8

    %nm1 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %10, <4 x {type}>* %nm1

    %rm2v = extractvalue [3 x <3 x {type}>] %rm, 2
    %rm2v0 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %11 = fmul <4 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %12 = fmul <4 x {type}> %m1v, %rm2v1
    %13 = fadd <4 x {type}> %12, %11

    %rm2v2 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %14 = fmul <4 x {type}> %m2v, %rm2v2
    %15 = fadd <4 x {type}> %14, %13

    %nm2 = getelementptr inbounds [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm, i32 0, i32 2
    store <4 x {type}> %15, <4 x {type}>* %nm2

    %16 = load [3 x <4 x {type}>], [3 x <4 x {type}>]* %nm

    ret [3 x <4 x {type}>] %16
}

; GLSL: mat4 = mat3x4 * mat4x3
define spir_func [4 x <4 x {type}>] @_Z17MatrixTimesMatrixDv3_Dv4_{abbr}Dv4_Dv3_{abbr}(
    [3 x <4 x {type}>] %m, [4 x <3 x {type}>] %rm) #0
{
    %nm = alloca [4 x <4 x {type}>]
    %m0v = extractvalue [3 x <4 x {type}>] %m, 0
    %m1v = extractvalue [3 x <4 x {type}>] %m, 1
    %m2v = extractvalue [3 x <4 x {type}>] %m, 2

    %rm0v = extractvalue [4 x <3 x {type}>] %rm, 0
    %rm0v0 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %1 = fmul <4 x {type}> %m0v, %rm0v0

    %rm0v1 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %2 = fmul <4 x {type}> %m1v, %rm0v1
    %3 = fadd <4 x {type}> %2, %1

    %rm0v2 = shufflevector <3 x {type}> %rm0v, <3 x {type}> %rm0v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %4 = fmul <4 x {type}> %m2v, %rm0v2
    %5 = fadd <4 x {type}> %4, %3

    %nm0 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 0
    store <4 x {type}> %5, <4 x {type}>* %nm0

    %rm1v = extractvalue [4 x <3 x {type}>] %rm, 1
    %rm1v0 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %6 = fmul <4 x {type}> %m0v, %rm1v0

    %rm1v1 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %7 = fmul <4 x {type}> %m1v, %rm1v1
    %8 = fadd <4 x {type}> %7, %6

    %rm1v2 = shufflevector <3 x {type}> %rm1v, <3 x {type}> %rm1v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %9 = fmul <4 x {type}> %m2v, %rm1v2
    %10 = fadd <4 x {type}> %9, %8

    %nm1 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 1
    store <4 x {type}> %10, <4 x {type}>* %nm1

    %rm2v = extractvalue [4 x <3 x {type}>] %rm, 2
    %rm2v0 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %11 = fmul <4 x {type}> %m0v, %rm2v0

    %rm2v1 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %12 = fmul <4 x {type}> %m1v, %rm2v1
    %13 = fadd <4 x {type}> %12, %11

    %rm2v2 = shufflevector <3 x {type}> %rm2v, <3 x {type}> %rm2v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %14 = fmul <4 x {type}> %m2v, %rm2v2
    %15 = fadd <4 x {type}> %14, %13

    %nm2 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 2
    store <4 x {type}> %15, <4 x {type}>* %nm2

    %rm3v = extractvalue [4 x <3 x {type}>] %rm, 3
    %rm3v0 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <4 x i32> <i32 0, i32 0, i32 0, i32 0>
    %16 = fmul <4 x {type}> %m0v, %rm3v0

    %rm3v1 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
    %17 = fmul <4 x {type}> %m1v, %rm3v1
    %18 = fadd <4 x {type}> %17, %16

    %rm3v2 = shufflevector <3 x {type}> %rm3v, <3 x {type}> %rm3v, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
    %19 = fmul <4 x {type}> %m2v, %rm3v2
    %20 = fadd <4 x {type}> %19, %18

    %nm3 = getelementptr inbounds [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm, i32 0, i32 3
    store <4 x {type}> %20, <4 x {type}>* %nm3

    %21 = load [4 x <4 x {type}>], [4 x <4 x {type}>]* %nm

    ret [4 x <4 x {type}>] %21
}

; GLSL helper: float = determinant2(vec2(float, float), vec2(float, float))
define spir_func {type} @llpc.determinant2(
    {type} %x0, {type} %y0, {type} %x1, {type} %y1)
{
    ; | x0   x1 |
    ; |         | = x0 * y1 - y0 * x1
    ; | y0   y1 |

    %1 = fmul {type} %x0, %y1
    %2 = fmul {type} %y0, %x1
    %3 = fsub {type} %1, %2
    ret {type} %3
}

; GLSL helper: float = determinant3(vec3(float, float, float), vec3(float, float, float))
define spir_func {type} @llpc.determinant3(
    {type} %x0, {type} %y0, {type} %z0,
    {type} %x1, {type} %y1, {type} %z1,
    {type} %x2, {type} %y2, {type} %z2)
{
    ; | x0   x1   x2 |
    ; |              |        | y1 y2 |        | x1 x2 |        | x1 x2 |
    ; | y0   y1   y2 | = x0 * |       | - y0 * |       | + z0 * |       |
    ; |              |        | z1 z2 |        | z1 z2 |        | y1 y2 |
    ; | z0   z1   z2 |
    ;
    ;                         | y1 y2 |        | z1 z2 |        | x1 x2 |
    ;                  = x0 * |       | + y0 * |       | + z0 * |       |
    ;                         | z1 z2 |        | x1 x2 |        | y1 y2 |

    %1 = call {type} @llpc.determinant2({type} %y1, {type} %z1, {type} %y2, {type} %z2)
    %2 = fmul {type} %1, %x0
    %3 = call {type} @llpc.determinant2({type} %z1, {type} %x1, {type} %z2, {type} %x2)
    %4 = fmul {type} %3, %y0
    %5 = fadd {type} %2, %4
    %6 = call {type} @llpc.determinant2({type} %x1, {type} %y1, {type} %x2, {type} %y2)
    %7 = fmul {type} %6, %z0
    %8 = fadd {type} %7, %5
    ret {type} %8
}

; GLSL helper: float = determinant4(vec4(float, float, float, float), vec4(float, float, float, float))
define spir_func {type} @llpc.determinant4(
    {type} %x0, {type} %y0, {type} %z0, {type} %w0,
    {type} %x1, {type} %y1, {type} %z1, {type} %w1,
    {type} %x2, {type} %y2, {type} %z2, {type} %w2,
    {type} %x3, {type} %y3, {type} %z3, {type} %w3)

{
    ; | x0   x1   x2   x3 |
    ; |                   |        | y1 y2 y3 |        | x1 x2 x3 |
    ; | y0   y1   y2   y3 |        |          |        |          |
    ; |                   | = x0 * | z1 z2 z3 | - y0 * | z1 z2 z3 | +
    ; | z0   z1   z2   z3 |        |          |        |          |
    ; |                   |        | w1 w2 w3 |        | w1 w2 w3 |
    ; | w0   w1   w2   w3 |
    ;
    ;                              | x1 x2 x3 |        | x1 x2 x3 |
    ;                              |          |        |          |
    ;                         z0 * | y1 y2 y3 | - w0 * | y1 y2 y3 |
    ;                              |          |        |          |
    ;                              | w1 w2 w3 |        | z1 z2 z3 |
    ;
    ;
    ;                              | y1 y2 y3 |        | z1 z2 z3 |
    ;                              |          |        |          |
    ;                       = x0 * | z1 z2 z3 | + y0 * | x1 x2 x3 | +
    ;                              |          |        |          |
    ;                              | w1 w2 w3 |        | w1 w2 w3 |
    ;
    ;                              | x1 x2 x3 |        | y1 y2 y3 |
    ;                              |          |        |          |
    ;                         z0 * | y1 y2 y3 | + w0 * | x1 x2 x3 |
    ;                              |          |        |          |
    ;                              | w1 w2 w3 |        | z1 z2 z3 |

    %1 = call {type} @llpc.determinant3({type} %y1, {type} %z1, {type} %w1, {type} %y2, {type} %z2, {type} %w2, {type} %y3, {type} %z3, {type} %w3)
    %2 = fmul {type} %1, %x0
    %3 = call {type} @llpc.determinant3({type} %z1, {type} %x1, {type} %w1, {type} %z2, {type} %x2, {type} %w2, {type} %z3, {type} %x3, {type} %w3)
    %4 = fmul {type} %3, %y0
    %5 = fadd {type} %2, %4
    %6 = call {type} @llpc.determinant3({type} %x1, {type} %y1, {type} %w1, {type} %x2, {type} %y2, {type} %w2, {type} %x3, {type} %y3, {type} %w3)
    %7 = fmul {type} %6, %z0
    %8 = fadd {type} %5, %7
    %9 = call {type} @llpc.determinant3({type} %y1, {type} %x1, {type} %z1, {type} %y2, {type} %x2, {type} %z2, {type} %y3, {type} %x3, {type} %z3)
    %10 = fmul {type} %9, %w0
    %11 = fadd {type} %8, %10
    ret {type} %11
}

; GLSL: {type} = determinant(mat2)
define spir_func {type} @_Z11determinantDv2_Dv2_{abbr}(
    [2 x <2 x {type}>] %m) #0
{
    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %m0v0 = extractelement <2 x {type}> %m0v, i32 0
    %m0v1 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [2 x <2 x {type}>] %m, 1
    %m1v0 = extractelement <2 x {type}> %m1v, i32 0
    %m1v1 = extractelement <2 x {type}> %m1v, i32 1

    %d = call {type} @llpc.determinant2({type} %m0v0, {type} %m0v1, {type} %m1v0, {type} %m1v1)
    ret {type} %d
}

; GLSL: {type} = determinant(mat3)
define spir_func {type} @_Z11determinantDv3_Dv3_{abbr}(
    [3 x <3 x {type}>] %m) #0
{
    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %m0v0 = extractelement <3 x {type}> %m0v, i32 0
    %m0v1 = extractelement <3 x {type}> %m0v, i32 1
    %m0v2 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %m1v0 = extractelement <3 x {type}> %m1v, i32 0
    %m1v1 = extractelement <3 x {type}> %m1v, i32 1
    %m1v2 = extractelement <3 x {type}> %m1v, i32 2

    %m2v = extractvalue [3 x <3 x {type}>] %m, 2
    %m2v0 = extractelement <3 x {type}> %m2v, i32 0
    %m2v1 = extractelement <3 x {type}> %m2v, i32 1
    %m2v2 = extractelement <3 x {type}> %m2v, i32 2

    %d = call {type} @llpc.determinant3(
        {type} %m0v0, {type} %m0v1, {type} %m0v2,
        {type} %m1v0, {type} %m1v1, {type} %m1v2,
        {type} %m2v0, {type} %m2v1, {type} %m2v2)
    ret {type} %d
}

; GLSL: {type} = determinant(mat4)
define spir_func {type} @_Z11determinantDv4_Dv4_{abbr}(
    [4 x <4 x {type}>] %m) #0
{
    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %m0v0 = extractelement <4 x {type}> %m0v, i32 0
    %m0v1 = extractelement <4 x {type}> %m0v, i32 1
    %m0v2 = extractelement <4 x {type}> %m0v, i32 2
    %m0v3 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %m1v0 = extractelement <4 x {type}> %m1v, i32 0
    %m1v1 = extractelement <4 x {type}> %m1v, i32 1
    %m1v2 = extractelement <4 x {type}> %m1v, i32 2
    %m1v3 = extractelement <4 x {type}> %m1v, i32 3

    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %m2v0 = extractelement <4 x {type}> %m2v, i32 0
    %m2v1 = extractelement <4 x {type}> %m2v, i32 1
    %m2v2 = extractelement <4 x {type}> %m2v, i32 2
    %m2v3 = extractelement <4 x {type}> %m2v, i32 3

    %m3v = extractvalue [4 x <4 x {type}>] %m, 3
    %m3v0 = extractelement <4 x {type}> %m3v, i32 0
    %m3v1 = extractelement <4 x {type}> %m3v, i32 1
    %m3v2 = extractelement <4 x {type}> %m3v, i32 2
    %m3v3 = extractelement <4 x {type}> %m3v, i32 3

    %d = call {type} @llpc.determinant4(
        {type} %m0v0, {type} %m0v1, {type} %m0v2, {type} %m0v3,
        {type} %m1v0, {type} %m1v1, {type} %m1v2, {type} %m1v3,
        {type} %m2v0, {type} %m2v1, {type} %m2v2, {type} %m2v3,
        {type} %m3v0, {type} %m3v1, {type} %m3v2, {type} %m3v3)
    ret {type} %d
}

; GLSL helper: float = dot3(vec3(float, float, float), vec3(float, float, float))
define spir_func {type} @llpc.dot3(
    {type} %x0, {type} %y0, {type} %z0,
    {type} %x1, {type} %y1, {type} %z1)
{
    %1 = fmul {type} %x1, %x0
    %2 = fmul {type} %y1, %y0
    %3 = fadd {type} %1, %2
    %4 = fmul {type} %z1, %z0
    %5 = fadd {type} %3, %4
    ret {type} %5
}

; GLSL helper: float = dot4(vec4(float, float, float, float), vec4(float, float, float, float))
define spir_func {type} @llpc.dot4(
    {type} %x0, {type} %y0, {type} %z0, {type} %w0,
    {type} %x1, {type} %y1, {type} %z1, {type} %w1)
{
    %1 = fmul {type} %x1, %x0
    %2 = fmul {type} %y1, %y0
    %3 = fadd {type} %1, %2
    %4 = fmul {type} %z1, %z0
    %5 = fadd {type} %3, %4
    %6 = fmul {type} %w1, %w0
    %7 = fadd {type} %5, %6
    ret {type} %7
}

; GLSL: mat2 = inverse(mat2)
define spir_func [2 x <2 x {type}>] @_Z13matrixInverseDv2_Dv2_{abbr}(
    [2 x <2 x {type}>] %m) #0
{
    ; [ x0   x1 ]                    [  y1 -x1 ]
    ; [         ]  = (1 / det(M))) * [         ]
    ; [ y0   y1 ]                    [ -y0  x0 ]
    %m0v = extractvalue [2 x <2 x {type}>] %m, 0
    %x0 = extractelement <2 x {type}> %m0v, i32 0
    %y0 = extractelement <2 x {type}> %m0v, i32 1

    %m1v = extractvalue [2 x <2 x {type}>] %m, 1
    %x1 = extractelement <2 x {type}> %m1v, i32 0
    %y1 = extractelement <2 x {type}> %m1v, i32 1

    %1 = call {type} @llpc.determinant2({type} %x0, {type} %y0, {type} %x1, {type} %y1)
    %2 = fdiv {type} 1.0, %1
    %3 = fsub {type} 0.0, %2
    %4 = fmul {type} %2, %y1
    %5 = fmul {type} %3, %y0
    %6 = fmul {type} %3, %x1
    %7 = fmul {type} %2, %x0
    %8 = insertelement <2 x {type}> undef, {type} %4, i32 0
    %9 = insertelement <2 x {type}> %8, {type} %5, i32 1
    %10 = insertvalue [2 x <2 x {type}>] undef, <2 x {type}> %9, 0
    %11 = insertelement <2 x {type}> undef, {type} %6, i32 0
    %12 = insertelement <2 x {type}> %11, {type} %7, i32 1
    %13 = insertvalue [2 x <2 x {type}>] %10 , <2 x {type}> %12, 1

    ret [2 x <2 x {type}>]  %13
}

; GLSL: mat3 = inverse(mat3)
define spir_func [3 x <3 x {type}>] @_Z13matrixInverseDv3_Dv3_{abbr}(
    [3 x <3 x {type}>] %m) #0
{
    ; [ x0   x1   x2 ]                   [ Adj(x0) Adj(x1) Adj(x2) ] T
    ; [              ]                   [                         ]
    ; [ y0   y1   y2 ]  = (1 / det(M)) * [ Adj(y0) Adj(y1) Adj(y2) ]
    ; [              ]                   [                         ]
    ; [ z0   z1   z2 ]                   [ Adj(z0) Adj(z1) Adj(z2) ]
    ;
    ;
    ;                     [ Adj(x0) Adj(y0) Adj(z0) ]
    ;                     [                         ]
    ;  = (1 / det(M)) *   [ Adj(x1) Adj(y1) Adj(y1) ]
    ;                     [                         ]
    ;                     [ Adj(x2) Adj(y2) Adj(z2) ]
    ;

    %m0v = extractvalue [3 x <3 x {type}>] %m, 0
    %x0 = extractelement <3 x {type}> %m0v, i32 0
    %y0 = extractelement <3 x {type}> %m0v, i32 1
    %z0 = extractelement <3 x {type}> %m0v, i32 2

    %m1v = extractvalue [3 x <3 x {type}>] %m, 1
    %x1 = extractelement <3 x {type}> %m1v, i32 0
    %y1 = extractelement <3 x {type}> %m1v, i32 1
    %z1 = extractelement <3 x {type}> %m1v, i32 2

    %m2v = extractvalue [3 x <3 x {type}>] %m, 2
    %x2 = extractelement <3 x {type}> %m2v, i32 0
    %y2 = extractelement <3 x {type}> %m2v, i32 1
    %z2 = extractelement <3 x {type}> %m2v, i32 2

    %adjx0 = call {type} @llpc.determinant2({type} %y1, {type} %z1, {type} %y2, {type} %z2)
    %adjx1 = call {type} @llpc.determinant2({type} %y2, {type} %z2, {type} %y0, {type} %z0)
    %adjx2 = call {type} @llpc.determinant2({type} %y0, {type} %z0, {type} %y1, {type} %z1)

    %det = call {type} @llpc.dot3({type} %x0, {type} %x1, {type} %x2,
                    {type} %adjx0, {type} %adjx1, {type} %adjx2)
    %rdet = fdiv {type} 1.0, %det

    %nx0 = fmul {type} %rdet, %adjx0
    %nx1 = fmul {type} %rdet, %adjx1
    %nx2 = fmul {type} %rdet, %adjx2

    %m00 = insertelement <3 x {type}> undef, {type} %nx0, i32 0
    %m01 = insertelement <3 x {type}> %m00, {type} %nx1, i32 1
    %m02 = insertelement <3 x {type}> %m01, {type} %nx2, i32 2
    %m0 = insertvalue [3 x <3 x {type}>] undef, <3 x {type}> %m02, 0

    %adjy0 = call {type} @llpc.determinant2({type} %z1, {type} %x1, {type} %z2, {type} %x2)
    %adjy1 = call {type} @llpc.determinant2({type} %z2, {type} %x2, {type} %z0, {type} %x0)
    %adjy2 = call {type} @llpc.determinant2({type} %z0, {type} %x0, {type} %z1, {type} %x1)


    %ny0 = fmul {type} %rdet, %adjy0
    %ny1 = fmul {type} %rdet, %adjy1
    %ny2 = fmul {type} %rdet, %adjy2

    %m10 = insertelement <3 x {type}> undef, {type} %ny0, i32 0
    %m11 = insertelement <3 x {type}> %m10, {type} %ny1, i32 1
    %m12 = insertelement <3 x {type}> %m11, {type} %ny2, i32 2
    %m1 = insertvalue [3 x <3 x {type}>] %m0, <3 x {type}> %m12, 1

    %adjz0 = call {type} @llpc.determinant2({type} %x1, {type} %y1, {type} %x2, {type} %y2)
    %adjz1 = call {type} @llpc.determinant2({type} %x2, {type} %y2, {type} %x0, {type} %y0)
    %adjz2 = call {type} @llpc.determinant2({type} %x0, {type} %y0, {type} %x1, {type} %y1)

    %nz0 = fmul {type} %rdet, %adjz0
    %nz1 = fmul {type} %rdet, %adjz1
    %nz2 = fmul {type} %rdet, %adjz2

    %m20 = insertelement <3 x {type}> undef, {type} %nz0, i32 0
    %m21 = insertelement <3 x {type}> %m20, {type} %nz1, i32 1
    %m22 = insertelement <3 x {type}> %m21, {type} %nz2, i32 2
    %m2 = insertvalue [3 x <3 x {type}>] %m1, <3 x {type}> %m22, 2

    ret [3 x <3 x {type}>] %m2
}

; GLSL: mat4 = inverse(mat4)
define spir_func [4 x <4 x {type}>] @_Z13matrixInverseDv4_Dv4_{abbr}(
    [4 x <4 x {type}>] %m) #0
{
    ; [ x0   x1   x2   x3 ]                   [ Adj(x0) Adj(x1) Adj(x2) Adj(x3) ] T
    ; [                   ]                   [                                 ]
    ; [ y0   y1   y2   y3 ]                   [ Adj(y0) Adj(y1) Adj(y2) Adj(y3) ]
    ; [                   ]  = (1 / det(M)) * [                                 ]
    ; [ z0   z1   z2   z3 ]                   [ Adj(z0) Adj(z1) Adj(z2) Adj(z3) ]
    ; [                   ]                   [                                 ]
    ; [ w0   w1   w2   w3 ]                   [ Adj(w0) Adj(w1) Adj(w2) Adj(w3) ]
    ;
    ;                  [ Adj(x0) Adj(y0) Adj(z0) Adj(w0) ]
    ;                  [                                 ]
    ;                  [ Adj(x1) Adj(y1) Adj(z2) Adj(w1) ]
    ; = (1 / det(M)) * [                                 ]
    ;                  [ Adj(x2) Adj(y2) Adj(z3) Adj(w2) ]
    ;                  [                                 ]
    ;                  [ Adj(x3) Adj(y3) Adj(z4) Adj(w3) ]

    %m0v = extractvalue [4 x <4 x {type}>] %m, 0
    %x0 = extractelement <4 x {type}> %m0v, i32 0
    %y0 = extractelement <4 x {type}> %m0v, i32 1
    %z0 = extractelement <4 x {type}> %m0v, i32 2
    %w0 = extractelement <4 x {type}> %m0v, i32 3

    %m1v = extractvalue [4 x <4 x {type}>] %m, 1
    %x1 = extractelement <4 x {type}> %m1v, i32 0
    %y1 = extractelement <4 x {type}> %m1v, i32 1
    %z1 = extractelement <4 x {type}> %m1v, i32 2
    %w1 = extractelement <4 x {type}> %m1v, i32 3

    %m2v = extractvalue [4 x <4 x {type}>] %m, 2
    %x2 = extractelement <4 x {type}> %m2v, i32 0
    %y2 = extractelement <4 x {type}> %m2v, i32 1
    %z2 = extractelement <4 x {type}> %m2v, i32 2
    %w2 = extractelement <4 x {type}> %m2v, i32 3

    %m3v = extractvalue [4 x <4 x {type}>] %m, 3
    %x3 = extractelement <4 x {type}> %m3v, i32 0
    %y3 = extractelement <4 x {type}> %m3v, i32 1
    %z3 = extractelement <4 x {type}> %m3v, i32 2
    %w3 = extractelement <4 x {type}> %m3v, i32 3

    %adjx0 = call {type} @llpc.determinant3(
            {type} %y1, {type} %z1, {type} %w1,
            {type} %y2, {type} %z2, {type} %w2,
            {type} %y3, {type} %z3, {type} %w3)
    %adjx1 = call {type} @llpc.determinant3(
            {type} %y2, {type} %z2, {type} %w2,
            {type} %y0, {type} %z0, {type} %w0,
            {type} %y3, {type} %z3, {type} %w3)
    %adjx2 = call {type} @llpc.determinant3(
            {type} %y3, {type} %z3, {type} %w3,
            {type} %y0, {type} %z0, {type} %w0,
            {type} %y1, {type} %z1, {type} %w1)
    %adjx3 = call {type} @llpc.determinant3(
            {type} %y0, {type} %z0, {type} %w0,
            {type} %y2, {type} %z2, {type} %w2,
            {type} %y1, {type} %z1, {type} %w1)

    %det = call {type} @llpc.dot4({type} %x0, {type} %x1, {type} %x2, {type} %x3,
            {type} %adjx0, {type} %adjx1, {type} %adjx2, {type} %adjx3)
    %rdet = fdiv {type} 1.0, %det

    %nx0 = fmul {type} %rdet, %adjx0
    %nx1 = fmul {type} %rdet, %adjx1
    %nx2 = fmul {type} %rdet, %adjx2
    %nx3 = fmul {type} %rdet, %adjx3

    %m00 = insertelement <4 x {type}> undef, {type} %nx0, i32 0
    %m01 = insertelement <4 x {type}> %m00, {type} %nx1, i32 1
    %m02 = insertelement <4 x {type}> %m01, {type} %nx2, i32 2
    %m03 = insertelement <4 x {type}> %m02, {type} %nx3, i32 3
    %m0 = insertvalue [4 x <4 x {type}>] undef, <4 x {type}> %m03, 0

    %adjy0 = call {type} @llpc.determinant3(
            {type} %z2, {type} %w2, {type} %x2,
            {type} %z1, {type} %w1, {type} %x1,
            {type} %z3, {type} %w3, {type} %x3)
    %adjy1 = call {type} @llpc.determinant3(
             {type} %z2, {type} %w2, {type} %x2,
             {type} %z3, {type} %w3, {type} %x3,
             {type} %z0, {type} %w0, {type} %x0)
    %adjy2 = call {type} @llpc.determinant3(
            {type} %z0, {type} %w0, {type} %x0,
            {type} %z3, {type} %w3, {type} %x3,
            {type} %z1, {type} %w1, {type} %x1)
    %adjy3 = call {type} @llpc.determinant3(
            {type} %z0, {type} %w0, {type} %x0,
            {type} %z1, {type} %w1, {type} %x1,
            {type} %z2, {type} %w2, {type} %x2)

    %ny0 = fmul {type} %rdet, %adjy0
    %ny1 = fmul {type} %rdet, %adjy1
    %ny2 = fmul {type} %rdet, %adjy2
    %ny3 = fmul {type} %rdet, %adjy3

    %m10 = insertelement <4 x {type}> undef, {type} %ny0, i32 0
    %m11 = insertelement <4 x {type}> %m10, {type} %ny1, i32 1
    %m12 = insertelement <4 x {type}> %m11, {type} %ny2, i32 2
    %m13 = insertelement <4 x {type}> %m12, {type} %ny3, i32 3
    %m1 = insertvalue [4 x <4 x {type}>] %m0, <4 x {type}> %m13, 1

    %adjz0 = call {type} @llpc.determinant3(
            {type} %w1, {type} %x1, {type} %y1,
            {type} %w2, {type} %x2, {type} %y2,
            {type} %w3, {type} %x3, {type} %y3)
    %adjz1 = call {type} @llpc.determinant3(
            {type} %w3, {type} %x3, {type} %y3,
            {type} %w2, {type} %x2, {type} %y2,
            {type} %w0, {type} %x0, {type} %y0)
    %adjz2 = call {type} @llpc.determinant3(
            {type} %w3, {type} %x3, {type} %y3,
            {type} %w0, {type} %x0, {type} %y0,
            {type} %w1, {type} %x1, {type} %y1)
    %adjz3 = call {type} @llpc.determinant3(
            {type} %w1, {type} %x1, {type} %y1,
            {type} %w0, {type} %x0, {type} %y0,
            {type} %w2, {type} %x2, {type} %y2)

    %nz0 = fmul {type} %rdet, %adjz0
    %nz1 = fmul {type} %rdet, %adjz1
    %nz2 = fmul {type} %rdet, %adjz2
    %nz3 = fmul {type} %rdet, %adjz3

    %m20 = insertelement <4 x {type}> undef, {type} %nz0, i32 0
    %m21 = insertelement <4 x {type}> %m20, {type} %nz1, i32 1
    %m22 = insertelement <4 x {type}> %m21, {type} %nz2, i32 2
    %m23 = insertelement <4 x {type}> %m22, {type} %nz3, i32 3
    %m2 = insertvalue [4 x <4 x {type}>] %m1, <4 x {type}> %m23, 2

    %adjw0 = call {type} @llpc.determinant3(
            {type} %x2, {type} %y2, {type} %z2,
            {type} %x1, {type} %y1, {type} %z1,
            {type} %x3, {type} %y3, {type} %z3)
    %adjw1 = call {type} @llpc.determinant3(
            {type} %x2, {type} %y2, {type} %z2,
            {type} %x3, {type} %y3, {type} %z3,
            {type} %x0, {type} %y0, {type} %z0)
    %adjw2 = call {type} @llpc.determinant3(
            {type} %x0, {type} %y0, {type} %z0,
            {type} %x3, {type} %y3, {type} %z3,
            {type} %x1, {type} %y1, {type} %z1)
    %adjw3 = call {type} @llpc.determinant3(
            {type} %x0, {type} %y0, {type} %z0,
            {type} %x1, {type} %y1, {type} %z1,
            {type} %x2, {type} %y2, {type} %z2)

    %nw0 = fmul {type} %rdet, %adjw0
    %nw1 = fmul {type} %rdet, %adjw1
    %nw2 = fmul {type} %rdet, %adjw2
    %nw3 = fmul {type} %rdet, %adjw3

    %m30 = insertelement <4 x {type}> undef, {type} %nw0, i32 0
    %m31 = insertelement <4 x {type}> %m30, {type} %nw1, i32 1
    %m32 = insertelement <4 x {type}> %m31, {type} %nw2, i32 2
    %m33 = insertelement <4 x {type}> %m32, {type} %nw3, i32 3
    %m3 = insertvalue [4 x <4 x {type}>] %m2, <4 x {type}> %m33, 3

    ret [4 x <4 x {type}>] %m3
}

declare spir_func float @_Z3dotDv2_fDv2_f(<2 x float> , <2 x float>) #0
declare spir_func float @_Z3dotDv3_fDv3_f(<3 x float> , <3 x float>) #0
declare spir_func float @_Z3dotDv4_fDv4_f(<4 x float> , <4 x float>) #0
declare spir_func double @_Z3dotDv2_dDv2_d(<2 x double> , <2 x double>) #0
declare spir_func double @_Z3dotDv3_dDv3_d(<3 x double> , <3 x double>) #0
declare spir_func double @_Z3dotDv4_dDv4_d(<4 x double> , <4 x double>) #0

attributes #0 = {{ nounwind }}
