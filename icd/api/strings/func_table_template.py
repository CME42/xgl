##
 #######################################################################################################################
 #
 #  Copyright (c) 2018 Advanced Micro Devices, Inc. All Rights Reserved.
 #
 #  Permission is hereby granted, free of charge, to any person obtaining a copy
 #  of this software and associated documentation files (the "Software"), to deal
 #  in the Software without restriction, including without limitation the rights
 #  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 #  copies of the Software, and to permit persons to whom the Software is
 #  furnished to do so, subject to the following conditions:
 #
 #  The above copyright notice and this permission notice shall be included in all
 #  copies or substantial portions of the Software.
 #
 #  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 #  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 #  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 #  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 #  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 #  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 #  SOFTWARE.
 #
 #######################################################################################################################

header_template = '''
$copyright_string$

// Do not edit this file by hand; generated via script from $entry_file$

#ifndef __STRINGS_G_FUNC_TABLE_H__
#define __STRINGS_G_FUNC_TABLE_H__

#include "include/khronos/vulkan.h"
#include "include/khronos/vk_icd.h"

namespace vk
{

// This is a function table of all known entry points in our driver.  It is used with internal driver layers
// to maintain "next function" jump addresses.
struct EntryPointTable
{
$entry_table_members$
};

};

#endif
'''

entry_table_member = '    PFN_$func_name$ $func_name$;'

impl_template = '''
$copyright_string$

// Do not edit this file by hand; generated via script from $entry_file$

#include "include/vk_dispatch.h"
#include "include/khronos/vulkan.h"
#include "include/khronos/vk_icd.h"

#include "$header_file$"

namespace vk
{

// =====================================================================================================================
// This function is used by layers to calculate the "next" layer's function.  Because each layer may not shadow every
// single function in the driver, it has to be done on a function-by-function basis.
//
// More explicitly, given a list of dispatch tables that each shadow one or more functions (in the order that they
// appear in the table), and a pointer to the "current" layer's dispatch table (which should be one of the tables in the
// array), this function will populate for each function in EntryFuncTable the next layer's shadowed function,
// eventually terminating in the standard driver dispatch table's implementation of each entry point.
//
// Note that the term "layer" here refers to internal driver layers and not Vulkan layers (although the behavior is
// similar).
//
// Also note that some of these functions may be extension functions that are not currently enabled by the device, or
// otherwise disabled via secure feature.  In those cases a nullptr will be written for those functions and they should
// not be called.  However, this behavior will be consistent for every layer that attempts to shadow that function
// meaning no layer's version of that entry point will ever be callable.
extern void GetNextDeviceLayerTable(
    const Instance*           pInstance,
    const Device*             pDevice,
    const DispatchTableEntry* pCurLayerTable,
    EntryPointTable*          pNextLayerFuncs)
{
    // Get all dispatch tables in the system
    const DispatchTableEntry* pAllTables[Instance::MaxDispatchTables] = {};
    uint32_t tableCount = pInstance->GetDispatchTables(pAllTables);

    // There should always be at least one dispatch table in the system (the standard one)
    VK_ASSERT(tableCount > 0);

    // Find the "next" layer's dispatch table if we are given a current table pointer.  Otherwise, just use the
    // root table.
    const DispatchTableEntry** pRemainingTables = nullptr;
    uint32_t remainingCount = 0;

    if ((pCurLayerTable != nullptr) && (tableCount > 1))
    {
        // Find the location of the current table in the array
        for (uint32_t i = 0; i < tableCount; ++i)
        {
            if (pAllTables[i] == pCurLayerTable)
            {
                // Get the one after it (there should be at least one)
                VK_ASSERT(i < tableCount - 1);

                pRemainingTables = &pAllTables[i + 1];
                remainingCount   = tableCount - i - 1;

                break;
            }
        }

        // The current table should be an installed dispatch table!
        VK_ASSERT(pRemainingTables != nullptr);
    }
    else
    {
        pRemainingTables = pAllTables;
        remainingCount   = tableCount;
    }

$gnl_code$
}

}
'''

gnl_entry = '''    pNextLayerFuncs->$func_name$ =
                       reinterpret_cast<PFN_$func_name$>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY($func_name$)));'''

