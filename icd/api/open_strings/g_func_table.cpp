
/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2016-2017 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 **********************************************************************************************************************/

// Do not edit this file by hand; generated via script from entry_points.txt

#include "include/vk_dispatch.h"
#include "include/khronos/vulkan.h"
#include "include/khronos/vk_icd.h"

#include "open_strings/strings.h"

namespace vk
{

// =====================================================================================================================
// This function is used by layers to calculate the "next" layer's function.  Because each layer may not shadow every
// single function in the driver, it has to be done on a function-by-function basis.
//
// More explicitly, given a list of dispatch tables that each shadow one or more functions (in the order that they
// appear in the table), and a pointer to the "current" layer's dispatch table (which should be one of the tables in the
// array), this function will populate for each function in EntryFuncTable the next layer's shadowed function,
// eventually terminating in the standard driver dispatch table's implementation of each entry point.
//
// Note that the term "layer" here refers to internal driver layers and not Vulkan layers (although the behavior is
// similar).
//
// Also note that some of these functions may be extension functions that are not currently enabled by the device, or
// otherwise disabled via secure feature.  In those cases a nullptr will be written for those functions and they should
// not be called.  However, this behavior will be consistent for every layer that attempts to shadow that function
// meaning no layer's version of that entry point will ever be callable.
extern void GetNextDeviceLayerTable(
    const Instance*           pInstance,
    const Device*             pDevice,
    const DispatchTableEntry* pCurLayerTable,
    EntryPointTable*          pNextLayerFuncs)
{
    // Get all dispatch tables in the system
    const DispatchTableEntry* pAllTables[Instance::MaxDispatchTables] = {};
    uint32_t tableCount = pInstance->GetDispatchTables(pAllTables);

    // There should always be at least one dispatch table in the system (the standard one)
    VK_ASSERT(tableCount > 0);

    // Find the "next" layer's dispatch table if we are given a current table pointer.  Otherwise, just use the
    // root table.
    const DispatchTableEntry** pRemainingTables = nullptr;
    uint32_t remainingCount = 0;

    if ((pCurLayerTable != nullptr) && (tableCount > 1))
    {
        // Find the location of the current table in the array
        for (uint32_t i = 0; i < tableCount; ++i)
        {
            if (pAllTables[i] == pCurLayerTable)
            {
                // Get the one after it (there should be at least one)
                VK_ASSERT(i < tableCount - 1);

                pRemainingTables = &pAllTables[i + 1];
                remainingCount   = tableCount - i - 1;

                break;
            }
        }

        // The current table should be an installed dispatch table!
        VK_ASSERT(pRemainingTables != nullptr);
    }
    else
    {
        pRemainingTables = pAllTables;
        remainingCount   = tableCount;
    }

    pNextLayerFuncs->vkGetDeviceProcAddr =
                       reinterpret_cast<PFN_vkGetDeviceProcAddr>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetDeviceProcAddr)));
    pNextLayerFuncs->vkGetInstanceProcAddr =
                       reinterpret_cast<PFN_vkGetInstanceProcAddr>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetInstanceProcAddr)));
    pNextLayerFuncs->vkCreateInstance =
                       reinterpret_cast<PFN_vkCreateInstance>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateInstance)));
    pNextLayerFuncs->vkEnumerateInstanceExtensionProperties =
                       reinterpret_cast<PFN_vkEnumerateInstanceExtensionProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEnumerateInstanceExtensionProperties)));
    pNextLayerFuncs->vkEnumerateInstanceLayerProperties =
                       reinterpret_cast<PFN_vkEnumerateInstanceLayerProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEnumerateInstanceLayerProperties)));
    pNextLayerFuncs->vkAllocateCommandBuffers =
                       reinterpret_cast<PFN_vkAllocateCommandBuffers>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkAllocateCommandBuffers)));
    pNextLayerFuncs->vkAllocateDescriptorSets =
                       reinterpret_cast<PFN_vkAllocateDescriptorSets>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkAllocateDescriptorSets)));
    pNextLayerFuncs->vkAllocateMemory =
                       reinterpret_cast<PFN_vkAllocateMemory>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkAllocateMemory)));
    pNextLayerFuncs->vkBeginCommandBuffer =
                       reinterpret_cast<PFN_vkBeginCommandBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkBeginCommandBuffer)));
    pNextLayerFuncs->vkBindBufferMemory =
                       reinterpret_cast<PFN_vkBindBufferMemory>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkBindBufferMemory)));
    pNextLayerFuncs->vkBindImageMemory =
                       reinterpret_cast<PFN_vkBindImageMemory>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkBindImageMemory)));
    pNextLayerFuncs->vkCmdBeginRenderPass =
                       reinterpret_cast<PFN_vkCmdBeginRenderPass>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBeginRenderPass)));
    pNextLayerFuncs->vkCmdBeginQuery =
                       reinterpret_cast<PFN_vkCmdBeginQuery>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBeginQuery)));
    pNextLayerFuncs->vkCmdBindDescriptorSets =
                       reinterpret_cast<PFN_vkCmdBindDescriptorSets>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBindDescriptorSets)));
    pNextLayerFuncs->vkCmdBindIndexBuffer =
                       reinterpret_cast<PFN_vkCmdBindIndexBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBindIndexBuffer)));
    pNextLayerFuncs->vkCmdBindPipeline =
                       reinterpret_cast<PFN_vkCmdBindPipeline>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBindPipeline)));
    pNextLayerFuncs->vkCmdBindVertexBuffers =
                       reinterpret_cast<PFN_vkCmdBindVertexBuffers>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBindVertexBuffers)));
    pNextLayerFuncs->vkCmdBlitImage =
                       reinterpret_cast<PFN_vkCmdBlitImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBlitImage)));
    pNextLayerFuncs->vkCmdClearAttachments =
                       reinterpret_cast<PFN_vkCmdClearAttachments>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdClearAttachments)));
    pNextLayerFuncs->vkCmdClearColorImage =
                       reinterpret_cast<PFN_vkCmdClearColorImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdClearColorImage)));
    pNextLayerFuncs->vkCmdClearDepthStencilImage =
                       reinterpret_cast<PFN_vkCmdClearDepthStencilImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdClearDepthStencilImage)));
    pNextLayerFuncs->vkCmdCopyBuffer =
                       reinterpret_cast<PFN_vkCmdCopyBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdCopyBuffer)));
    pNextLayerFuncs->vkCmdCopyBufferToImage =
                       reinterpret_cast<PFN_vkCmdCopyBufferToImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdCopyBufferToImage)));
    pNextLayerFuncs->vkCmdCopyImage =
                       reinterpret_cast<PFN_vkCmdCopyImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdCopyImage)));
    pNextLayerFuncs->vkCmdCopyImageToBuffer =
                       reinterpret_cast<PFN_vkCmdCopyImageToBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdCopyImageToBuffer)));
    pNextLayerFuncs->vkCmdCopyQueryPoolResults =
                       reinterpret_cast<PFN_vkCmdCopyQueryPoolResults>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdCopyQueryPoolResults)));
    pNextLayerFuncs->vkCmdDraw =
                       reinterpret_cast<PFN_vkCmdDraw>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDraw)));
    pNextLayerFuncs->vkCmdDrawIndexed =
                       reinterpret_cast<PFN_vkCmdDrawIndexed>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDrawIndexed)));
    pNextLayerFuncs->vkCmdDrawIndexedIndirect =
                       reinterpret_cast<PFN_vkCmdDrawIndexedIndirect>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDrawIndexedIndirect)));
    pNextLayerFuncs->vkCmdDrawIndirect =
                       reinterpret_cast<PFN_vkCmdDrawIndirect>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDrawIndirect)));
    pNextLayerFuncs->vkCmdDispatch =
                       reinterpret_cast<PFN_vkCmdDispatch>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDispatch)));
    pNextLayerFuncs->vkCmdDispatchIndirect =
                       reinterpret_cast<PFN_vkCmdDispatchIndirect>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDispatchIndirect)));
    pNextLayerFuncs->vkCmdEndRenderPass =
                       reinterpret_cast<PFN_vkCmdEndRenderPass>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdEndRenderPass)));
    pNextLayerFuncs->vkCmdEndQuery =
                       reinterpret_cast<PFN_vkCmdEndQuery>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdEndQuery)));
    pNextLayerFuncs->vkCmdExecuteCommands =
                       reinterpret_cast<PFN_vkCmdExecuteCommands>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdExecuteCommands)));
    pNextLayerFuncs->vkCmdFillBuffer =
                       reinterpret_cast<PFN_vkCmdFillBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdFillBuffer)));
    pNextLayerFuncs->vkCmdNextSubpass =
                       reinterpret_cast<PFN_vkCmdNextSubpass>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdNextSubpass)));
    pNextLayerFuncs->vkCmdPipelineBarrier =
                       reinterpret_cast<PFN_vkCmdPipelineBarrier>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdPipelineBarrier)));
    pNextLayerFuncs->vkCmdPushConstants =
                       reinterpret_cast<PFN_vkCmdPushConstants>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdPushConstants)));
    pNextLayerFuncs->vkCmdResetEvent =
                       reinterpret_cast<PFN_vkCmdResetEvent>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdResetEvent)));
    pNextLayerFuncs->vkCmdResetQueryPool =
                       reinterpret_cast<PFN_vkCmdResetQueryPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdResetQueryPool)));
    pNextLayerFuncs->vkCmdResolveImage =
                       reinterpret_cast<PFN_vkCmdResolveImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdResolveImage)));
    pNextLayerFuncs->vkCmdSetBlendConstants =
                       reinterpret_cast<PFN_vkCmdSetBlendConstants>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetBlendConstants)));
    pNextLayerFuncs->vkCmdSetDepthBias =
                       reinterpret_cast<PFN_vkCmdSetDepthBias>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetDepthBias)));
    pNextLayerFuncs->vkCmdSetDepthBounds =
                       reinterpret_cast<PFN_vkCmdSetDepthBounds>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetDepthBounds)));
    pNextLayerFuncs->vkCmdSetEvent =
                       reinterpret_cast<PFN_vkCmdSetEvent>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetEvent)));
    pNextLayerFuncs->vkCmdSetLineWidth =
                       reinterpret_cast<PFN_vkCmdSetLineWidth>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetLineWidth)));
    pNextLayerFuncs->vkCmdSetScissor =
                       reinterpret_cast<PFN_vkCmdSetScissor>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetScissor)));
    pNextLayerFuncs->vkCmdSetStencilCompareMask =
                       reinterpret_cast<PFN_vkCmdSetStencilCompareMask>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetStencilCompareMask)));
    pNextLayerFuncs->vkCmdSetStencilReference =
                       reinterpret_cast<PFN_vkCmdSetStencilReference>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetStencilReference)));
    pNextLayerFuncs->vkCmdSetStencilWriteMask =
                       reinterpret_cast<PFN_vkCmdSetStencilWriteMask>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetStencilWriteMask)));
    pNextLayerFuncs->vkCmdSetViewport =
                       reinterpret_cast<PFN_vkCmdSetViewport>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetViewport)));
    pNextLayerFuncs->vkCmdUpdateBuffer =
                       reinterpret_cast<PFN_vkCmdUpdateBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdUpdateBuffer)));
    pNextLayerFuncs->vkCmdWaitEvents =
                       reinterpret_cast<PFN_vkCmdWaitEvents>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdWaitEvents)));
    pNextLayerFuncs->vkCmdWriteTimestamp =
                       reinterpret_cast<PFN_vkCmdWriteTimestamp>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdWriteTimestamp)));
    pNextLayerFuncs->vkCreateBuffer =
                       reinterpret_cast<PFN_vkCreateBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateBuffer)));
    pNextLayerFuncs->vkCreateBufferView =
                       reinterpret_cast<PFN_vkCreateBufferView>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateBufferView)));
    pNextLayerFuncs->vkCreateCommandPool =
                       reinterpret_cast<PFN_vkCreateCommandPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateCommandPool)));
    pNextLayerFuncs->vkCreateComputePipelines =
                       reinterpret_cast<PFN_vkCreateComputePipelines>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateComputePipelines)));
    pNextLayerFuncs->vkCreateDescriptorPool =
                       reinterpret_cast<PFN_vkCreateDescriptorPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateDescriptorPool)));
    pNextLayerFuncs->vkCreateDescriptorSetLayout =
                       reinterpret_cast<PFN_vkCreateDescriptorSetLayout>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateDescriptorSetLayout)));
    pNextLayerFuncs->vkCreateDevice =
                       reinterpret_cast<PFN_vkCreateDevice>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateDevice)));
    pNextLayerFuncs->vkCreateEvent =
                       reinterpret_cast<PFN_vkCreateEvent>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateEvent)));
    pNextLayerFuncs->vkCreateFence =
                       reinterpret_cast<PFN_vkCreateFence>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateFence)));
    pNextLayerFuncs->vkCreateFramebuffer =
                       reinterpret_cast<PFN_vkCreateFramebuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateFramebuffer)));
    pNextLayerFuncs->vkCreateGraphicsPipelines =
                       reinterpret_cast<PFN_vkCreateGraphicsPipelines>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateGraphicsPipelines)));
    pNextLayerFuncs->vkCreateImage =
                       reinterpret_cast<PFN_vkCreateImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateImage)));
    pNextLayerFuncs->vkCreateImageView =
                       reinterpret_cast<PFN_vkCreateImageView>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateImageView)));
    pNextLayerFuncs->vkCreatePipelineCache =
                       reinterpret_cast<PFN_vkCreatePipelineCache>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreatePipelineCache)));
    pNextLayerFuncs->vkCreatePipelineLayout =
                       reinterpret_cast<PFN_vkCreatePipelineLayout>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreatePipelineLayout)));
    pNextLayerFuncs->vkCreateQueryPool =
                       reinterpret_cast<PFN_vkCreateQueryPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateQueryPool)));
    pNextLayerFuncs->vkCreateRenderPass =
                       reinterpret_cast<PFN_vkCreateRenderPass>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateRenderPass)));
    pNextLayerFuncs->vkCreateSampler =
                       reinterpret_cast<PFN_vkCreateSampler>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateSampler)));
    pNextLayerFuncs->vkCreateSemaphore =
                       reinterpret_cast<PFN_vkCreateSemaphore>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateSemaphore)));
    pNextLayerFuncs->vkCreateShaderModule =
                       reinterpret_cast<PFN_vkCreateShaderModule>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateShaderModule)));
    pNextLayerFuncs->vkDestroyBuffer =
                       reinterpret_cast<PFN_vkDestroyBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyBuffer)));
    pNextLayerFuncs->vkDestroyBufferView =
                       reinterpret_cast<PFN_vkDestroyBufferView>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyBufferView)));
    pNextLayerFuncs->vkDestroyCommandPool =
                       reinterpret_cast<PFN_vkDestroyCommandPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyCommandPool)));
    pNextLayerFuncs->vkDestroyDescriptorPool =
                       reinterpret_cast<PFN_vkDestroyDescriptorPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyDescriptorPool)));
    pNextLayerFuncs->vkDestroyDescriptorSetLayout =
                       reinterpret_cast<PFN_vkDestroyDescriptorSetLayout>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyDescriptorSetLayout)));
    pNextLayerFuncs->vkDestroyDevice =
                       reinterpret_cast<PFN_vkDestroyDevice>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyDevice)));
    pNextLayerFuncs->vkDestroyEvent =
                       reinterpret_cast<PFN_vkDestroyEvent>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyEvent)));
    pNextLayerFuncs->vkDestroyFence =
                       reinterpret_cast<PFN_vkDestroyFence>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyFence)));
    pNextLayerFuncs->vkDestroyFramebuffer =
                       reinterpret_cast<PFN_vkDestroyFramebuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyFramebuffer)));
    pNextLayerFuncs->vkDestroyImage =
                       reinterpret_cast<PFN_vkDestroyImage>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyImage)));
    pNextLayerFuncs->vkDestroyImageView =
                       reinterpret_cast<PFN_vkDestroyImageView>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyImageView)));
    pNextLayerFuncs->vkDestroyInstance =
                       reinterpret_cast<PFN_vkDestroyInstance>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyInstance)));
    pNextLayerFuncs->vkDestroyPipeline =
                       reinterpret_cast<PFN_vkDestroyPipeline>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyPipeline)));
    pNextLayerFuncs->vkDestroyPipelineCache =
                       reinterpret_cast<PFN_vkDestroyPipelineCache>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyPipelineCache)));
    pNextLayerFuncs->vkDestroyPipelineLayout =
                       reinterpret_cast<PFN_vkDestroyPipelineLayout>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyPipelineLayout)));
    pNextLayerFuncs->vkDestroyQueryPool =
                       reinterpret_cast<PFN_vkDestroyQueryPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyQueryPool)));
    pNextLayerFuncs->vkDestroyRenderPass =
                       reinterpret_cast<PFN_vkDestroyRenderPass>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyRenderPass)));
    pNextLayerFuncs->vkDestroySampler =
                       reinterpret_cast<PFN_vkDestroySampler>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroySampler)));
    pNextLayerFuncs->vkDestroySemaphore =
                       reinterpret_cast<PFN_vkDestroySemaphore>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroySemaphore)));
    pNextLayerFuncs->vkDestroyShaderModule =
                       reinterpret_cast<PFN_vkDestroyShaderModule>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyShaderModule)));
    pNextLayerFuncs->vkDeviceWaitIdle =
                       reinterpret_cast<PFN_vkDeviceWaitIdle>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDeviceWaitIdle)));
    pNextLayerFuncs->vkEndCommandBuffer =
                       reinterpret_cast<PFN_vkEndCommandBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEndCommandBuffer)));
    pNextLayerFuncs->vkEnumerateDeviceExtensionProperties =
                       reinterpret_cast<PFN_vkEnumerateDeviceExtensionProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEnumerateDeviceExtensionProperties)));
    pNextLayerFuncs->vkEnumerateDeviceLayerProperties =
                       reinterpret_cast<PFN_vkEnumerateDeviceLayerProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEnumerateDeviceLayerProperties)));
    pNextLayerFuncs->vkEnumeratePhysicalDevices =
                       reinterpret_cast<PFN_vkEnumeratePhysicalDevices>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEnumeratePhysicalDevices)));
    pNextLayerFuncs->vkFlushMappedMemoryRanges =
                       reinterpret_cast<PFN_vkFlushMappedMemoryRanges>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkFlushMappedMemoryRanges)));
    pNextLayerFuncs->vkFreeCommandBuffers =
                       reinterpret_cast<PFN_vkFreeCommandBuffers>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkFreeCommandBuffers)));
    pNextLayerFuncs->vkFreeDescriptorSets =
                       reinterpret_cast<PFN_vkFreeDescriptorSets>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkFreeDescriptorSets)));
    pNextLayerFuncs->vkFreeMemory =
                       reinterpret_cast<PFN_vkFreeMemory>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkFreeMemory)));
    pNextLayerFuncs->vkGetBufferMemoryRequirements =
                       reinterpret_cast<PFN_vkGetBufferMemoryRequirements>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetBufferMemoryRequirements)));
    pNextLayerFuncs->vkGetDeviceMemoryCommitment =
                       reinterpret_cast<PFN_vkGetDeviceMemoryCommitment>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetDeviceMemoryCommitment)));
    pNextLayerFuncs->vkGetDeviceQueue =
                       reinterpret_cast<PFN_vkGetDeviceQueue>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetDeviceQueue)));
    pNextLayerFuncs->vkGetEventStatus =
                       reinterpret_cast<PFN_vkGetEventStatus>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetEventStatus)));
    pNextLayerFuncs->vkGetFenceStatus =
                       reinterpret_cast<PFN_vkGetFenceStatus>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetFenceStatus)));
    pNextLayerFuncs->vkGetImageMemoryRequirements =
                       reinterpret_cast<PFN_vkGetImageMemoryRequirements>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetImageMemoryRequirements)));
    pNextLayerFuncs->vkGetImageSparseMemoryRequirements =
                       reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetImageSparseMemoryRequirements)));
    pNextLayerFuncs->vkGetImageSubresourceLayout =
                       reinterpret_cast<PFN_vkGetImageSubresourceLayout>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetImageSubresourceLayout)));
    pNextLayerFuncs->vkGetPhysicalDeviceFeatures =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceFeatures)));
    pNextLayerFuncs->vkGetPhysicalDeviceFormatProperties =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceFormatProperties)));
    pNextLayerFuncs->vkGetPhysicalDeviceImageFormatProperties =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceImageFormatProperties)));
    pNextLayerFuncs->vkGetPhysicalDeviceMemoryProperties =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceMemoryProperties)));
    pNextLayerFuncs->vkGetPhysicalDeviceProperties =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceProperties)));
    pNextLayerFuncs->vkGetPhysicalDeviceQueueFamilyProperties =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceQueueFamilyProperties)));
    pNextLayerFuncs->vkGetPhysicalDeviceSparseImageFormatProperties =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSparseImageFormatProperties)));
    pNextLayerFuncs->vkGetPipelineCacheData =
                       reinterpret_cast<PFN_vkGetPipelineCacheData>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPipelineCacheData)));
    pNextLayerFuncs->vkGetQueryPoolResults =
                       reinterpret_cast<PFN_vkGetQueryPoolResults>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetQueryPoolResults)));
    pNextLayerFuncs->vkGetRenderAreaGranularity =
                       reinterpret_cast<PFN_vkGetRenderAreaGranularity>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetRenderAreaGranularity)));
    pNextLayerFuncs->vkInvalidateMappedMemoryRanges =
                       reinterpret_cast<PFN_vkInvalidateMappedMemoryRanges>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkInvalidateMappedMemoryRanges)));
    pNextLayerFuncs->vkMapMemory =
                       reinterpret_cast<PFN_vkMapMemory>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkMapMemory)));
    pNextLayerFuncs->vkMergePipelineCaches =
                       reinterpret_cast<PFN_vkMergePipelineCaches>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkMergePipelineCaches)));
    pNextLayerFuncs->vkQueueBindSparse =
                       reinterpret_cast<PFN_vkQueueBindSparse>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkQueueBindSparse)));
    pNextLayerFuncs->vkQueueSubmit =
                       reinterpret_cast<PFN_vkQueueSubmit>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkQueueSubmit)));
    pNextLayerFuncs->vkQueueWaitIdle =
                       reinterpret_cast<PFN_vkQueueWaitIdle>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkQueueWaitIdle)));
    pNextLayerFuncs->vkResetCommandBuffer =
                       reinterpret_cast<PFN_vkResetCommandBuffer>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkResetCommandBuffer)));
    pNextLayerFuncs->vkResetCommandPool =
                       reinterpret_cast<PFN_vkResetCommandPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkResetCommandPool)));
    pNextLayerFuncs->vkResetDescriptorPool =
                       reinterpret_cast<PFN_vkResetDescriptorPool>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkResetDescriptorPool)));
    pNextLayerFuncs->vkResetEvent =
                       reinterpret_cast<PFN_vkResetEvent>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkResetEvent)));
    pNextLayerFuncs->vkResetFences =
                       reinterpret_cast<PFN_vkResetFences>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkResetFences)));
    pNextLayerFuncs->vkSetEvent =
                       reinterpret_cast<PFN_vkSetEvent>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkSetEvent)));
    pNextLayerFuncs->vkUnmapMemory =
                       reinterpret_cast<PFN_vkUnmapMemory>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkUnmapMemory)));
    pNextLayerFuncs->vkUpdateDescriptorSets =
                       reinterpret_cast<PFN_vkUpdateDescriptorSets>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkUpdateDescriptorSets)));
    pNextLayerFuncs->vkWaitForFences =
                       reinterpret_cast<PFN_vkWaitForFences>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkWaitForFences)));
#if VK_KHR_get_physical_device_properties2
    pNextLayerFuncs->vkGetPhysicalDeviceFeatures2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceFeatures2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceProperties2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceProperties2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceProperties2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceFormatProperties2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceFormatProperties2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceImageFormatProperties2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceImageFormatProperties2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceQueueFamilyProperties2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceQueueFamilyProperties2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceMemoryProperties2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceMemoryProperties2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceSparseImageFormatProperties2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSparseImageFormatProperties2KHR)));
#endif
#if VK_KHR_bind_memory2
    pNextLayerFuncs->vkBindBufferMemory2KHR =
                       reinterpret_cast<PFN_vkBindBufferMemory2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkBindBufferMemory2KHR)));
    pNextLayerFuncs->vkBindImageMemory2KHR =
                       reinterpret_cast<PFN_vkBindImageMemory2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkBindImageMemory2KHR)));
#endif
#if VK_KHR_descriptor_update_template
    pNextLayerFuncs->vkCreateDescriptorUpdateTemplateKHR =
                       reinterpret_cast<PFN_vkCreateDescriptorUpdateTemplateKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateDescriptorUpdateTemplateKHR)));
    pNextLayerFuncs->vkDestroyDescriptorUpdateTemplateKHR =
                       reinterpret_cast<PFN_vkDestroyDescriptorUpdateTemplateKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyDescriptorUpdateTemplateKHR)));
    pNextLayerFuncs->vkUpdateDescriptorSetWithTemplateKHR =
                       reinterpret_cast<PFN_vkUpdateDescriptorSetWithTemplateKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkUpdateDescriptorSetWithTemplateKHR)));
#endif
#if VK_KHX_device_group_creation
    pNextLayerFuncs->vkEnumeratePhysicalDeviceGroupsKHX =
                       reinterpret_cast<PFN_vkEnumeratePhysicalDeviceGroupsKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkEnumeratePhysicalDeviceGroupsKHX)));
#endif
#if VK_KHX_device_group
    pNextLayerFuncs->vkGetPhysicalDevicePresentRectanglesKHX =
                       reinterpret_cast<PFN_vkGetPhysicalDevicePresentRectanglesKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDevicePresentRectanglesKHX)));
    pNextLayerFuncs->vkGetDeviceGroupPeerMemoryFeaturesKHX =
                       reinterpret_cast<PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetDeviceGroupPeerMemoryFeaturesKHX)));
    pNextLayerFuncs->vkCmdSetDeviceMaskKHX =
                       reinterpret_cast<PFN_vkCmdSetDeviceMaskKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetDeviceMaskKHX)));
    pNextLayerFuncs->vkGetDeviceGroupPresentCapabilitiesKHX =
                       reinterpret_cast<PFN_vkGetDeviceGroupPresentCapabilitiesKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetDeviceGroupPresentCapabilitiesKHX)));
    pNextLayerFuncs->vkGetDeviceGroupSurfacePresentModesKHX =
                       reinterpret_cast<PFN_vkGetDeviceGroupSurfacePresentModesKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetDeviceGroupSurfacePresentModesKHX)));
    pNextLayerFuncs->vkAcquireNextImage2KHX =
                       reinterpret_cast<PFN_vkAcquireNextImage2KHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkAcquireNextImage2KHX)));
    pNextLayerFuncs->vkCmdDispatchBaseKHX =
                       reinterpret_cast<PFN_vkCmdDispatchBaseKHX>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDispatchBaseKHX)));
#endif
#if VK_KHR_external_memory_capabilities
    pNextLayerFuncs->vkGetPhysicalDeviceExternalBufferPropertiesKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceExternalBufferPropertiesKHR)));
#endif
#if VK_KHR_external_memory_fd
    pNextLayerFuncs->vkGetMemoryFdPropertiesKHR =
                       reinterpret_cast<PFN_vkGetMemoryFdPropertiesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetMemoryFdPropertiesKHR)));
    pNextLayerFuncs->vkGetMemoryFdKHR =
                       reinterpret_cast<PFN_vkGetMemoryFdKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetMemoryFdKHR)));
#endif
#if VK_KHR_external_memory_win32
    pNextLayerFuncs->vkGetMemoryWin32HandleKHR =
                       reinterpret_cast<PFN_vkGetMemoryWin32HandleKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetMemoryWin32HandleKHR)));
    pNextLayerFuncs->vkGetMemoryWin32HandlePropertiesKHR =
                       reinterpret_cast<PFN_vkGetMemoryWin32HandlePropertiesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetMemoryWin32HandlePropertiesKHR)));
#endif
#if VK_KHR_external_semaphore_capabilities
    pNextLayerFuncs->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)));
#endif
#if VK_KHR_external_semaphore_fd
    pNextLayerFuncs->vkImportSemaphoreFdKHR =
                       reinterpret_cast<PFN_vkImportSemaphoreFdKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkImportSemaphoreFdKHR)));
    pNextLayerFuncs->vkGetSemaphoreFdKHR =
                       reinterpret_cast<PFN_vkGetSemaphoreFdKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetSemaphoreFdKHR)));
#endif
#if VK_KHR_external_semaphore_win32
    pNextLayerFuncs->vkImportSemaphoreWin32HandleKHR =
                       reinterpret_cast<PFN_vkImportSemaphoreWin32HandleKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkImportSemaphoreWin32HandleKHR)));
    pNextLayerFuncs->vkGetSemaphoreWin32HandleKHR =
                       reinterpret_cast<PFN_vkGetSemaphoreWin32HandleKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetSemaphoreWin32HandleKHR)));
#endif
#if VK_KHR_maintenance1
    pNextLayerFuncs->vkTrimCommandPoolKHR =
                       reinterpret_cast<PFN_vkTrimCommandPoolKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkTrimCommandPoolKHR)));
#endif
#if VK_KHR_surface
    pNextLayerFuncs->vkDestroySurfaceKHR =
                       reinterpret_cast<PFN_vkDestroySurfaceKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroySurfaceKHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceSurfaceCapabilitiesKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSurfaceCapabilitiesKHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceSurfaceFormatsKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceFormatsKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSurfaceFormatsKHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceSurfacePresentModesKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSurfacePresentModesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSurfacePresentModesKHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceSurfaceSupportKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceSupportKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSurfaceSupportKHR)));
#endif
#if VK_KHR_get_surface_capabilities2
    pNextLayerFuncs->vkGetPhysicalDeviceSurfaceCapabilities2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSurfaceCapabilities2KHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceSurfaceFormats2KHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceFormats2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceSurfaceFormats2KHR)));
#endif
#if VK_KHR_xcb_surface
    pNextLayerFuncs->vkCreateXcbSurfaceKHR =
                       reinterpret_cast<PFN_vkCreateXcbSurfaceKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateXcbSurfaceKHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceXcbPresentationSupportKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceXcbPresentationSupportKHR)));
#endif
#if VK_KHR_xlib_surface
    pNextLayerFuncs->vkCreateXlibSurfaceKHR =
                       reinterpret_cast<PFN_vkCreateXlibSurfaceKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateXlibSurfaceKHR)));
    pNextLayerFuncs->vkGetPhysicalDeviceXlibPresentationSupportKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceXlibPresentationSupportKHR)));
#endif
#if VK_KHR_swapchain
    pNextLayerFuncs->vkAcquireNextImageKHR =
                       reinterpret_cast<PFN_vkAcquireNextImageKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkAcquireNextImageKHR)));
    pNextLayerFuncs->vkCreateSwapchainKHR =
                       reinterpret_cast<PFN_vkCreateSwapchainKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateSwapchainKHR)));
    pNextLayerFuncs->vkDestroySwapchainKHR =
                       reinterpret_cast<PFN_vkDestroySwapchainKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroySwapchainKHR)));
    pNextLayerFuncs->vkGetSwapchainImagesKHR =
                       reinterpret_cast<PFN_vkGetSwapchainImagesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetSwapchainImagesKHR)));
    pNextLayerFuncs->vkQueuePresentKHR =
                       reinterpret_cast<PFN_vkQueuePresentKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkQueuePresentKHR)));
#endif
#if VK_AMD_draw_indirect_count
    pNextLayerFuncs->vkCmdDrawIndexedIndirectCountAMD =
                       reinterpret_cast<PFN_vkCmdDrawIndexedIndirectCountAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDrawIndexedIndirectCountAMD)));
    pNextLayerFuncs->vkCmdDrawIndirectCountAMD =
                       reinterpret_cast<PFN_vkCmdDrawIndirectCountAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDrawIndirectCountAMD)));
#endif
#if VK_AMD_shader_info
    pNextLayerFuncs->vkGetShaderInfoAMD =
                       reinterpret_cast<PFN_vkGetShaderInfoAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetShaderInfoAMD)));
#endif
#if VK_EXT_debug_marker
    pNextLayerFuncs->vkCmdDebugMarkerBeginEXT =
                       reinterpret_cast<PFN_vkCmdDebugMarkerBeginEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDebugMarkerBeginEXT)));
    pNextLayerFuncs->vkCmdDebugMarkerEndEXT =
                       reinterpret_cast<PFN_vkCmdDebugMarkerEndEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDebugMarkerEndEXT)));
    pNextLayerFuncs->vkCmdDebugMarkerInsertEXT =
                       reinterpret_cast<PFN_vkCmdDebugMarkerInsertEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdDebugMarkerInsertEXT)));
    pNextLayerFuncs->vkDebugMarkerSetObjectTagEXT =
                       reinterpret_cast<PFN_vkDebugMarkerSetObjectTagEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDebugMarkerSetObjectTagEXT)));
    pNextLayerFuncs->vkDebugMarkerSetObjectNameEXT =
                       reinterpret_cast<PFN_vkDebugMarkerSetObjectNameEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDebugMarkerSetObjectNameEXT)));
#endif
#if VK_AMD_gpa_interface
    pNextLayerFuncs->vkCreateGpaSessionAMD =
                       reinterpret_cast<PFN_vkCreateGpaSessionAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCreateGpaSessionAMD)));
    pNextLayerFuncs->vkDestroyGpaSessionAMD =
                       reinterpret_cast<PFN_vkDestroyGpaSessionAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkDestroyGpaSessionAMD)));
    pNextLayerFuncs->vkSetGpaDeviceClockModeAMD =
                       reinterpret_cast<PFN_vkSetGpaDeviceClockModeAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkSetGpaDeviceClockModeAMD)));
    pNextLayerFuncs->vkCmdBeginGpaSessionAMD =
                       reinterpret_cast<PFN_vkCmdBeginGpaSessionAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBeginGpaSessionAMD)));
    pNextLayerFuncs->vkCmdEndGpaSessionAMD =
                       reinterpret_cast<PFN_vkCmdEndGpaSessionAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdEndGpaSessionAMD)));
    pNextLayerFuncs->vkCmdBeginGpaSampleAMD =
                       reinterpret_cast<PFN_vkCmdBeginGpaSampleAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdBeginGpaSampleAMD)));
    pNextLayerFuncs->vkCmdEndGpaSampleAMD =
                       reinterpret_cast<PFN_vkCmdEndGpaSampleAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdEndGpaSampleAMD)));
    pNextLayerFuncs->vkGetGpaSessionStatusAMD =
                       reinterpret_cast<PFN_vkGetGpaSessionStatusAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetGpaSessionStatusAMD)));
    pNextLayerFuncs->vkGetGpaSessionResultsAMD =
                       reinterpret_cast<PFN_vkGetGpaSessionResultsAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetGpaSessionResultsAMD)));
    pNextLayerFuncs->vkResetGpaSessionAMD =
                       reinterpret_cast<PFN_vkResetGpaSessionAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkResetGpaSessionAMD)));
    pNextLayerFuncs->vkCmdCopyGpaSessionResultsAMD =
                       reinterpret_cast<PFN_vkCmdCopyGpaSessionResultsAMD>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdCopyGpaSessionResultsAMD)));
#endif
#if VK_KHR_get_memory_requirements2
    pNextLayerFuncs->vkGetImageMemoryRequirements2KHR =
                       reinterpret_cast<PFN_vkGetImageMemoryRequirements2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetImageMemoryRequirements2KHR)));
    pNextLayerFuncs->vkGetBufferMemoryRequirements2KHR =
                       reinterpret_cast<PFN_vkGetBufferMemoryRequirements2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetBufferMemoryRequirements2KHR)));
    pNextLayerFuncs->vkGetImageSparseMemoryRequirements2KHR =
                       reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements2KHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetImageSparseMemoryRequirements2KHR)));
#endif
#if VK_EXT_sample_locations
    pNextLayerFuncs->vkCmdSetSampleLocationsEXT =
                       reinterpret_cast<PFN_vkCmdSetSampleLocationsEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkCmdSetSampleLocationsEXT)));
    pNextLayerFuncs->vkGetPhysicalDeviceMultisamplePropertiesEXT =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceMultisamplePropertiesEXT)));
#endif
#if VK_KHR_external_fence_capabilities
    pNextLayerFuncs->vkGetPhysicalDeviceExternalFencePropertiesKHR =
                       reinterpret_cast<PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetPhysicalDeviceExternalFencePropertiesKHR)));
#endif
#if VK_KHR_external_fence_fd
    pNextLayerFuncs->vkImportFenceFdKHR =
                       reinterpret_cast<PFN_vkImportFenceFdKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkImportFenceFdKHR)));
    pNextLayerFuncs->vkGetFenceFdKHR =
                       reinterpret_cast<PFN_vkGetFenceFdKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetFenceFdKHR)));
#endif
#if VK_KHR_external_fence_win32
    pNextLayerFuncs->vkImportFenceWin32HandleKHR =
                       reinterpret_cast<PFN_vkImportFenceWin32HandleKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkImportFenceWin32HandleKHR)));
    pNextLayerFuncs->vkGetFenceWin32HandleKHR =
                       reinterpret_cast<PFN_vkGetFenceWin32HandleKHR>(vk::GetIcdProcAddr(
                           pInstance, pDevice, remainingCount, pRemainingTables,
                           VK_SECURE_ENTRY(vkGetFenceWin32HandleKHR)));
#endif

}

}
